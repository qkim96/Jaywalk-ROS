// Generated by gencpp from file gizmo_msgs/MqttStatusResponse.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_MQTTSTATUSRESPONSE_H
#define GIZMO_MSGS_MESSAGE_MQTTSTATUSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gizmo_msgs
{
template <class ContainerAllocator>
struct MqttStatusResponse_
{
  typedef MqttStatusResponse_<ContainerAllocator> Type;

  MqttStatusResponse_()
    : device()
    , environment()
    , robot_id()
    , alt_cred_path()
    , connected(false)  {
    }
  MqttStatusResponse_(const ContainerAllocator& _alloc)
    : device(_alloc)
    , environment(_alloc)
    , robot_id(_alloc)
    , alt_cred_path(_alloc)
    , connected(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _device_type;
  _device_type device;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _environment_type;
  _environment_type environment;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_id_type;
  _robot_id_type robot_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _alt_cred_path_type;
  _alt_cred_path_type alt_cred_path;

   typedef uint8_t _connected_type;
  _connected_type connected;





  typedef boost::shared_ptr< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MqttStatusResponse_

typedef ::gizmo_msgs::MqttStatusResponse_<std::allocator<void> > MqttStatusResponse;

typedef boost::shared_ptr< ::gizmo_msgs::MqttStatusResponse > MqttStatusResponsePtr;
typedef boost::shared_ptr< ::gizmo_msgs::MqttStatusResponse const> MqttStatusResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator1> & lhs, const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator2> & rhs)
{
  return lhs.device == rhs.device &&
    lhs.environment == rhs.environment &&
    lhs.robot_id == rhs.robot_id &&
    lhs.alt_cred_path == rhs.alt_cred_path &&
    lhs.connected == rhs.connected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator1> & lhs, const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3313a52b8cda4d151d159b5b106a66d1";
  }

  static const char* value(const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3313a52b8cda4d15ULL;
  static const uint64_t static_value2 = 0x1d159b5b106a66d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/MqttStatusResponse";
  }

  static const char* value(const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MQTT Node will assemble topic names for you based on the device, environment\n"
"# robot_id, and the 'endpoint' which is specified when you publish the message\n"
"# More info at:\n"
"# https://github.com/mayfieldrobotics/kuri_project_management/tree/master/mqtt\n"
"string device\n"
"string environment\n"
"string robot_id\n"
"\n"
"# In test environment, we let MQTT pick its own path for credentials so we\n"
"# don't interfere with other MQTT nodes\n"
"string alt_cred_path\n"
"\n"
"bool connected\n"
"\n"
;
  }

  static const char* value(const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device);
      stream.next(m.environment);
      stream.next(m.robot_id);
      stream.next(m.alt_cred_path);
      stream.next(m.connected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MqttStatusResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::MqttStatusResponse_<ContainerAllocator>& v)
  {
    s << indent << "device: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.device);
    s << indent << "environment: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.environment);
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_id);
    s << indent << "alt_cred_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.alt_cred_path);
    s << indent << "connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connected);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_MQTTSTATUSRESPONSE_H
