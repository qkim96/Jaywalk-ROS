// Generated by gencpp from file gizmo_msgs/RomojiGoal.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_ROMOJIGOAL_H
#define GIZMO_MSGS_MESSAGE_ROMOJIGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gizmo_msgs
{
template <class ContainerAllocator>
struct RomojiGoal_
{
  typedef RomojiGoal_<ContainerAllocator> Type;

  RomojiGoal_()
    : name()
    , sound(false)
    , request_id()  {
    }
  RomojiGoal_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , sound(false)
    , request_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _sound_type;
  _sound_type sound;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _request_id_type;
  _request_id_type request_id;





  typedef boost::shared_ptr< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RomojiGoal_

typedef ::gizmo_msgs::RomojiGoal_<std::allocator<void> > RomojiGoal;

typedef boost::shared_ptr< ::gizmo_msgs::RomojiGoal > RomojiGoalPtr;
typedef boost::shared_ptr< ::gizmo_msgs::RomojiGoal const> RomojiGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::RomojiGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::RomojiGoal_<ContainerAllocator1> & lhs, const ::gizmo_msgs::RomojiGoal_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.sound == rhs.sound &&
    lhs.request_id == rhs.request_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::RomojiGoal_<ContainerAllocator1> & lhs, const ::gizmo_msgs::RomojiGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e81e783d10916ab9bbf83e484eaeac29";
  }

  static const char* value(const ::gizmo_msgs::RomojiGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe81e783d10916ab9ULL;
  static const uint64_t static_value2 = 0xbbf83e484eaeac29ULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/RomojiGoal";
  }

  static const char* value(const ::gizmo_msgs::RomojiGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Name of romoji to play\n"
"string name\n"
"# Whether to play sound or not (if the animation has sounds)\n"
"bool sound\n"
"# Request ID of the animation\n"
"string request_id\n"
;
  }

  static const char* value(const ::gizmo_msgs::RomojiGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.sound);
      stream.next(m.request_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RomojiGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::RomojiGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::RomojiGoal_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "sound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sound);
    s << indent << "request_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.request_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_ROMOJIGOAL_H
