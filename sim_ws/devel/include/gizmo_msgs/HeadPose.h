// Generated by gencpp from file gizmo_msgs/HeadPose.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_HEADPOSE_H
#define GIZMO_MSGS_MESSAGE_HEADPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gizmo_msgs
{
template <class ContainerAllocator>
struct HeadPose_
{
  typedef HeadPose_<ContainerAllocator> Type;

  HeadPose_()
    : pan(0.0)
    , tilt(0.0)  {
    }
  HeadPose_(const ContainerAllocator& _alloc)
    : pan(0.0)
    , tilt(0.0)  {
  (void)_alloc;
    }



   typedef float _pan_type;
  _pan_type pan;

   typedef float _tilt_type;
  _tilt_type tilt;





  typedef boost::shared_ptr< ::gizmo_msgs::HeadPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::HeadPose_<ContainerAllocator> const> ConstPtr;

}; // struct HeadPose_

typedef ::gizmo_msgs::HeadPose_<std::allocator<void> > HeadPose;

typedef boost::shared_ptr< ::gizmo_msgs::HeadPose > HeadPosePtr;
typedef boost::shared_ptr< ::gizmo_msgs::HeadPose const> HeadPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::HeadPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::HeadPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::HeadPose_<ContainerAllocator1> & lhs, const ::gizmo_msgs::HeadPose_<ContainerAllocator2> & rhs)
{
  return lhs.pan == rhs.pan &&
    lhs.tilt == rhs.tilt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::HeadPose_<ContainerAllocator1> & lhs, const ::gizmo_msgs::HeadPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::HeadPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::HeadPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::HeadPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::HeadPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::HeadPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::HeadPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::HeadPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "938e11f380abc0513a5b7367d0f157bf";
  }

  static const char* value(const ::gizmo_msgs::HeadPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x938e11f380abc051ULL;
  static const uint64_t static_value2 = 0x3a5b7367d0f157bfULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::HeadPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/HeadPose";
  }

  static const char* value(const ::gizmo_msgs::HeadPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::HeadPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pan\n"
"float32 tilt\n"
;
  }

  static const char* value(const ::gizmo_msgs::HeadPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::HeadPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pan);
      stream.next(m.tilt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeadPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::HeadPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::HeadPose_<ContainerAllocator>& v)
  {
    s << indent << "pan: ";
    Printer<float>::stream(s, indent + "  ", v.pan);
    s << indent << "tilt: ";
    Printer<float>::stream(s, indent + "  ", v.tilt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_HEADPOSE_H
