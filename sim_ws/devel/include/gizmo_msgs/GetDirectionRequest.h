// Generated by gencpp from file gizmo_msgs/GetDirectionRequest.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_GETDIRECTIONREQUEST_H
#define GIZMO_MSGS_MESSAGE_GETDIRECTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gizmo_msgs
{
template <class ContainerAllocator>
struct GetDirectionRequest_
{
  typedef GetDirectionRequest_<ContainerAllocator> Type;

  GetDirectionRequest_()
    : threshold(0)
    , ms_duration(0)
    , ms_delay(0)  {
    }
  GetDirectionRequest_(const ContainerAllocator& _alloc)
    : threshold(0)
    , ms_duration(0)
    , ms_delay(0)  {
  (void)_alloc;
    }



   typedef uint8_t _threshold_type;
  _threshold_type threshold;

   typedef uint16_t _ms_duration_type;
  _ms_duration_type ms_duration;

   typedef uint16_t _ms_delay_type;
  _ms_delay_type ms_delay;





  typedef boost::shared_ptr< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetDirectionRequest_

typedef ::gizmo_msgs::GetDirectionRequest_<std::allocator<void> > GetDirectionRequest;

typedef boost::shared_ptr< ::gizmo_msgs::GetDirectionRequest > GetDirectionRequestPtr;
typedef boost::shared_ptr< ::gizmo_msgs::GetDirectionRequest const> GetDirectionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator1> & lhs, const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.threshold == rhs.threshold &&
    lhs.ms_duration == rhs.ms_duration &&
    lhs.ms_delay == rhs.ms_delay;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator1> & lhs, const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "973b922ecf777fa6c205891146371856";
  }

  static const char* value(const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x973b922ecf777fa6ULL;
  static const uint64_t static_value2 = 0xc205891146371856ULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/GetDirectionRequest";
  }

  static const char* value(const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 threshold\n"
"uint16 ms_duration\n"
"uint16 ms_delay\n"
;
  }

  static const char* value(const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.threshold);
      stream.next(m.ms_duration);
      stream.next(m.ms_delay);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDirectionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::GetDirectionRequest_<ContainerAllocator>& v)
  {
    s << indent << "threshold: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.threshold);
    s << indent << "ms_duration: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ms_duration);
    s << indent << "ms_delay: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ms_delay);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_GETDIRECTIONREQUEST_H
