// Generated by gencpp from file gizmo_msgs/ChestLED.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_CHESTLED_H
#define GIZMO_MSGS_MESSAGE_CHESTLED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ColorRGBA.h>

namespace gizmo_msgs
{
template <class ContainerAllocator>
struct ChestLED_
{
  typedef ChestLED_<ContainerAllocator> Type;

  ChestLED_()
    : array()  {
    }
  ChestLED_(const ContainerAllocator& _alloc)
    : array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::ColorRGBA_<ContainerAllocator> >> _array_type;
  _array_type array;





  typedef boost::shared_ptr< ::gizmo_msgs::ChestLED_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::ChestLED_<ContainerAllocator> const> ConstPtr;

}; // struct ChestLED_

typedef ::gizmo_msgs::ChestLED_<std::allocator<void> > ChestLED;

typedef boost::shared_ptr< ::gizmo_msgs::ChestLED > ChestLEDPtr;
typedef boost::shared_ptr< ::gizmo_msgs::ChestLED const> ChestLEDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::ChestLED_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::ChestLED_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::ChestLED_<ContainerAllocator1> & lhs, const ::gizmo_msgs::ChestLED_<ContainerAllocator2> & rhs)
{
  return lhs.array == rhs.array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::ChestLED_<ContainerAllocator1> & lhs, const ::gizmo_msgs::ChestLED_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::ChestLED_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::ChestLED_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::ChestLED_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::ChestLED_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::ChestLED_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::ChestLED_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::ChestLED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00ea539b8abace8c98c145055575f66f";
  }

  static const char* value(const ::gizmo_msgs::ChestLED_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00ea539b8abace8cULL;
  static const uint64_t static_value2 = 0x98c145055575f66fULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::ChestLED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/ChestLED";
  }

  static const char* value(const ::gizmo_msgs::ChestLED_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::ChestLED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/ColorRGBA[] array\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::gizmo_msgs::ChestLED_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::ChestLED_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChestLED_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::ChestLED_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::ChestLED_<ContainerAllocator>& v)
  {
    s << indent << "array[]" << std::endl;
    for (size_t i = 0; i < v.array.size(); ++i)
    {
      s << indent << "  array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "    ", v.array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_CHESTLED_H
