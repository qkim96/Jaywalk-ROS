// Generated by gencpp from file gizmo_msgs/NavigationGoal.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_NAVIGATIONGOAL_H
#define GIZMO_MSGS_MESSAGE_NAVIGATIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <gizmo_msgs/HeadPose.h>

namespace gizmo_msgs
{
template <class ContainerAllocator>
struct NavigationGoal_
{
  typedef NavigationGoal_<ContainerAllocator> Type;

  NavigationGoal_()
    : nav_type(0)
    , pose()
    , waypoint_uuid()
    , head_pose()
    , request_id()  {
    }
  NavigationGoal_(const ContainerAllocator& _alloc)
    : nav_type(0)
    , pose(_alloc)
    , waypoint_uuid(_alloc)
    , head_pose(_alloc)
    , request_id(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _nav_type_type;
  _nav_type_type nav_type;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _waypoint_uuid_type;
  _waypoint_uuid_type waypoint_uuid;

   typedef  ::gizmo_msgs::HeadPose_<ContainerAllocator>  _head_pose_type;
  _head_pose_type head_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _request_id_type;
  _request_id_type request_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GO_TO_WAYPOINT)
  #undef GO_TO_WAYPOINT
#endif
#if defined(_WIN32) && defined(DRIVE_TO_POINT_IN_IMAGE)
  #undef DRIVE_TO_POINT_IN_IMAGE
#endif
#if defined(_WIN32) && defined(FOLLOW_ME)
  #undef FOLLOW_ME
#endif

  enum {
    GO_TO_WAYPOINT = 0,
    DRIVE_TO_POINT_IN_IMAGE = 1,
    FOLLOW_ME = 2,
  };


  typedef boost::shared_ptr< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationGoal_

typedef ::gizmo_msgs::NavigationGoal_<std::allocator<void> > NavigationGoal;

typedef boost::shared_ptr< ::gizmo_msgs::NavigationGoal > NavigationGoalPtr;
typedef boost::shared_ptr< ::gizmo_msgs::NavigationGoal const> NavigationGoalConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::NavigationGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::NavigationGoal_<ContainerAllocator1> & lhs, const ::gizmo_msgs::NavigationGoal_<ContainerAllocator2> & rhs)
{
  return lhs.nav_type == rhs.nav_type &&
    lhs.pose == rhs.pose &&
    lhs.waypoint_uuid == rhs.waypoint_uuid &&
    lhs.head_pose == rhs.head_pose &&
    lhs.request_id == rhs.request_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::NavigationGoal_<ContainerAllocator1> & lhs, const ::gizmo_msgs::NavigationGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c5cee24740976f929b08b2903f932ed";
  }

  static const char* value(const ::gizmo_msgs::NavigationGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c5cee24740976f9ULL;
  static const uint64_t static_value2 = 0x29b08b2903f932edULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/NavigationGoal";
  }

  static const char* value(const ::gizmo_msgs::NavigationGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a message covering all types of navigation\n"
"byte GO_TO_WAYPOINT=0\n"
"byte DRIVE_TO_POINT_IN_IMAGE=1\n"
"byte FOLLOW_ME=2\n"
"\n"
"# Type of navigation\n"
"byte nav_type\n"
"# Goal of navigation\n"
"geometry_msgs/Pose pose\n"
"# Waypoint UUID for GO_TO_WAYPOINT\n"
"string waypoint_uuid\n"
"# Head pose for GO_TO_WAYPOINT\n"
"gizmo_msgs/HeadPose head_pose\n"
"# Request ID (if from client)\n"
"string request_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: gizmo_msgs/HeadPose\n"
"float32 pan\n"
"float32 tilt\n"
;
  }

  static const char* value(const ::gizmo_msgs::NavigationGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nav_type);
      stream.next(m.pose);
      stream.next(m.waypoint_uuid);
      stream.next(m.head_pose);
      stream.next(m.request_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::NavigationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::NavigationGoal_<ContainerAllocator>& v)
  {
    s << indent << "nav_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.nav_type);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "waypoint_uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.waypoint_uuid);
    s << indent << "head_pose: ";
    s << std::endl;
    Printer< ::gizmo_msgs::HeadPose_<ContainerAllocator> >::stream(s, indent + "  ", v.head_pose);
    s << indent << "request_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.request_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_NAVIGATIONGOAL_H
