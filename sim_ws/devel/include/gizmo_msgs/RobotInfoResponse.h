// Generated by gencpp from file gizmo_msgs/RobotInfoResponse.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_ROBOTINFORESPONSE_H
#define GIZMO_MSGS_MESSAGE_ROBOTINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gizmo_msgs
{
template <class ContainerAllocator>
struct RobotInfoResponse_
{
  typedef RobotInfoResponse_<ContainerAllocator> Type;

  RobotInfoResponse_()
    : client_interface_ver(0)
    , robot_base_ver()
    , gizmo_ver()  {
    }
  RobotInfoResponse_(const ContainerAllocator& _alloc)
    : client_interface_ver(0)
    , robot_base_ver(_alloc)
    , gizmo_ver(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _client_interface_ver_type;
  _client_interface_ver_type client_interface_ver;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_base_ver_type;
  _robot_base_ver_type robot_base_ver;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gizmo_ver_type;
  _gizmo_ver_type gizmo_ver;





  typedef boost::shared_ptr< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInfoResponse_

typedef ::gizmo_msgs::RobotInfoResponse_<std::allocator<void> > RobotInfoResponse;

typedef boost::shared_ptr< ::gizmo_msgs::RobotInfoResponse > RobotInfoResponsePtr;
typedef boost::shared_ptr< ::gizmo_msgs::RobotInfoResponse const> RobotInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator1> & lhs, const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.client_interface_ver == rhs.client_interface_ver &&
    lhs.robot_base_ver == rhs.robot_base_ver &&
    lhs.gizmo_ver == rhs.gizmo_ver;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator1> & lhs, const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bab6b4a913b26a0d3237655be117a32";
  }

  static const char* value(const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bab6b4a913b26a0ULL;
  static const uint64_t static_value2 = 0xd3237655be117a32ULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/RobotInfoResponse";
  }

  static const char* value(const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 client_interface_ver\n"
"string robot_base_ver\n"
"string gizmo_ver\n"
"\n"
;
  }

  static const char* value(const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.client_interface_ver);
      stream.next(m.robot_base_ver);
      stream.next(m.gizmo_ver);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::RobotInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "client_interface_ver: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.client_interface_ver);
    s << indent << "robot_base_ver: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_base_ver);
    s << indent << "gizmo_ver: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gizmo_ver);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_ROBOTINFORESPONSE_H
