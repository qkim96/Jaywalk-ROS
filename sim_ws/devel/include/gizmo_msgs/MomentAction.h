// Generated by gencpp from file gizmo_msgs/MomentAction.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_MOMENTACTION_H
#define GIZMO_MSGS_MESSAGE_MOMENTACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gizmo_msgs
{
template <class ContainerAllocator>
struct MomentAction_
{
  typedef MomentAction_<ContainerAllocator> Type;

  MomentAction_()
    : event()
    , uuid()  {
    }
  MomentAction_(const ContainerAllocator& _alloc)
    : event(_alloc)
    , uuid(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _event_type;
  _event_type event;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uuid_type;
  _uuid_type uuid;





  typedef boost::shared_ptr< ::gizmo_msgs::MomentAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::MomentAction_<ContainerAllocator> const> ConstPtr;

}; // struct MomentAction_

typedef ::gizmo_msgs::MomentAction_<std::allocator<void> > MomentAction;

typedef boost::shared_ptr< ::gizmo_msgs::MomentAction > MomentActionPtr;
typedef boost::shared_ptr< ::gizmo_msgs::MomentAction const> MomentActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::MomentAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::MomentAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::MomentAction_<ContainerAllocator1> & lhs, const ::gizmo_msgs::MomentAction_<ContainerAllocator2> & rhs)
{
  return lhs.event == rhs.event &&
    lhs.uuid == rhs.uuid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::MomentAction_<ContainerAllocator1> & lhs, const ::gizmo_msgs::MomentAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::MomentAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::MomentAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::MomentAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::MomentAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::MomentAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::MomentAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::MomentAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9dc0fac8b817df8f7b99ae1839315e4";
  }

  static const char* value(const ::gizmo_msgs::MomentAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9dc0fac8b817df8ULL;
  static const uint64_t static_value2 = 0xf7b99ae1839315e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::MomentAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/MomentAction";
  }

  static const char* value(const ::gizmo_msgs::MomentAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::MomentAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string event\n"
"string uuid\n"
;
  }

  static const char* value(const ::gizmo_msgs::MomentAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::MomentAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event);
      stream.next(m.uuid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MomentAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::MomentAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::MomentAction_<ContainerAllocator>& v)
  {
    s << indent << "event: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.event);
    s << indent << "uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uuid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_MOMENTACTION_H
