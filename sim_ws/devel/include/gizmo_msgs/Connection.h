// Generated by gencpp from file gizmo_msgs/Connection.msg
// DO NOT EDIT!


#ifndef GIZMO_MSGS_MESSAGE_CONNECTION_H
#define GIZMO_MSGS_MESSAGE_CONNECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gizmo_msgs
{
template <class ContainerAllocator>
struct Connection_
{
  typedef Connection_<ContainerAllocator> Type;

  Connection_()
    : is_connected(false)
    , peer_id()
    , are_all_peers_gone(false)  {
    }
  Connection_(const ContainerAllocator& _alloc)
    : is_connected(false)
    , peer_id(_alloc)
    , are_all_peers_gone(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_connected_type;
  _is_connected_type is_connected;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _peer_id_type;
  _peer_id_type peer_id;

   typedef uint8_t _are_all_peers_gone_type;
  _are_all_peers_gone_type are_all_peers_gone;





  typedef boost::shared_ptr< ::gizmo_msgs::Connection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gizmo_msgs::Connection_<ContainerAllocator> const> ConstPtr;

}; // struct Connection_

typedef ::gizmo_msgs::Connection_<std::allocator<void> > Connection;

typedef boost::shared_ptr< ::gizmo_msgs::Connection > ConnectionPtr;
typedef boost::shared_ptr< ::gizmo_msgs::Connection const> ConnectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gizmo_msgs::Connection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gizmo_msgs::Connection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gizmo_msgs::Connection_<ContainerAllocator1> & lhs, const ::gizmo_msgs::Connection_<ContainerAllocator2> & rhs)
{
  return lhs.is_connected == rhs.is_connected &&
    lhs.peer_id == rhs.peer_id &&
    lhs.are_all_peers_gone == rhs.are_all_peers_gone;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gizmo_msgs::Connection_<ContainerAllocator1> & lhs, const ::gizmo_msgs::Connection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gizmo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::Connection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gizmo_msgs::Connection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gizmo_msgs::Connection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gizmo_msgs::Connection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gizmo_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f822d32f1144ffda815fe88d48597f4";
  }

  static const char* value(const ::gizmo_msgs::Connection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f822d32f1144ffdULL;
  static const uint64_t static_value2 = 0xa815fe88d48597f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::gizmo_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gizmo_msgs/Connection";
  }

  static const char* value(const ::gizmo_msgs::Connection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gizmo_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_connected\n"
"string peer_id\n"
"bool are_all_peers_gone\n"
;
  }

  static const char* value(const ::gizmo_msgs::Connection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gizmo_msgs::Connection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_connected);
      stream.next(m.peer_id);
      stream.next(m.are_all_peers_gone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Connection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gizmo_msgs::Connection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gizmo_msgs::Connection_<ContainerAllocator>& v)
  {
    s << indent << "is_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_connected);
    s << indent << "peer_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.peer_id);
    s << indent << "are_all_peers_gone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.are_all_peers_gone);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GIZMO_MSGS_MESSAGE_CONNECTION_H
