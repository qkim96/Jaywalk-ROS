// Generated by gencpp from file mobile_base_driver/WheelTrajPoint.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_DRIVER_MESSAGE_WHEELTRAJPOINT_H
#define MOBILE_BASE_DRIVER_MESSAGE_WHEELTRAJPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_base_driver
{
template <class ContainerAllocator>
struct WheelTrajPoint_
{
  typedef WheelTrajPoint_<ContainerAllocator> Type;

  WheelTrajPoint_()
    : time_from_start()
    , linear_vel(0.0)
    , angular_vel(0.0)  {
    }
  WheelTrajPoint_(const ContainerAllocator& _alloc)
    : time_from_start()
    , linear_vel(0.0)
    , angular_vel(0.0)  {
  (void)_alloc;
    }



   typedef ros::Duration _time_from_start_type;
  _time_from_start_type time_from_start;

   typedef double _linear_vel_type;
  _linear_vel_type linear_vel;

   typedef double _angular_vel_type;
  _angular_vel_type angular_vel;





  typedef boost::shared_ptr< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> const> ConstPtr;

}; // struct WheelTrajPoint_

typedef ::mobile_base_driver::WheelTrajPoint_<std::allocator<void> > WheelTrajPoint;

typedef boost::shared_ptr< ::mobile_base_driver::WheelTrajPoint > WheelTrajPointPtr;
typedef boost::shared_ptr< ::mobile_base_driver::WheelTrajPoint const> WheelTrajPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator1> & lhs, const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator2> & rhs)
{
  return lhs.time_from_start == rhs.time_from_start &&
    lhs.linear_vel == rhs.linear_vel &&
    lhs.angular_vel == rhs.angular_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator1> & lhs, const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83f621b6e10790ea4ea291815a52bf4a";
  }

  static const char* value(const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83f621b6e10790eaULL;
  static const uint64_t static_value2 = 0x4ea291815a52bf4aULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base_driver/WheelTrajPoint";
  }

  static const char* value(const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duration time_from_start\n"
"float64 linear_vel\n"
"float64 angular_vel\n"
;
  }

  static const char* value(const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_from_start);
      stream.next(m.linear_vel);
      stream.next(m.angular_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelTrajPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base_driver::WheelTrajPoint_<ContainerAllocator>& v)
  {
    s << indent << "time_from_start: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_from_start);
    s << indent << "linear_vel: ";
    Printer<double>::stream(s, indent + "  ", v.linear_vel);
    s << indent << "angular_vel: ";
    Printer<double>::stream(s, indent + "  ", v.angular_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_DRIVER_MESSAGE_WHEELTRAJPOINT_H
