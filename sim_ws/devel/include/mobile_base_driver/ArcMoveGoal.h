// Generated by gencpp from file mobile_base_driver/ArcMoveGoal.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_DRIVER_MESSAGE_ARCMOVEGOAL_H
#define MOBILE_BASE_DRIVER_MESSAGE_ARCMOVEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_base_driver
{
template <class ContainerAllocator>
struct ArcMoveGoal_
{
  typedef ArcMoveGoal_<ContainerAllocator> Type;

  ArcMoveGoal_()
    : arc_len(0.0)
    , linear_velocity(0.0)
    , angle(0.0)
    , angular_velocity(0.0)
    , duration(0.0)  {
    }
  ArcMoveGoal_(const ContainerAllocator& _alloc)
    : arc_len(0.0)
    , linear_velocity(0.0)
    , angle(0.0)
    , angular_velocity(0.0)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef float _arc_len_type;
  _arc_len_type arc_len;

   typedef float _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef float _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ArcMoveGoal_

typedef ::mobile_base_driver::ArcMoveGoal_<std::allocator<void> > ArcMoveGoal;

typedef boost::shared_ptr< ::mobile_base_driver::ArcMoveGoal > ArcMoveGoalPtr;
typedef boost::shared_ptr< ::mobile_base_driver::ArcMoveGoal const> ArcMoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator1> & lhs, const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.arc_len == rhs.arc_len &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.angle == rhs.angle &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator1> & lhs, const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49b394402086123603ca274f830ff69c";
  }

  static const char* value(const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49b3944020861236ULL;
  static const uint64_t static_value2 = 0x03ca274f830ff69cULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base_driver/ArcMoveGoal";
  }

  static const char* value(const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float32 arc_len\n"
"float32 linear_velocity\n"
"float32 angle\n"
"float32 angular_velocity\n"
"float32 duration\n"
;
  }

  static const char* value(const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arc_len);
      stream.next(m.linear_velocity);
      stream.next(m.angle);
      stream.next(m.angular_velocity);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArcMoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base_driver::ArcMoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "arc_len: ";
    Printer<float>::stream(s, indent + "  ", v.arc_len);
    s << indent << "linear_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "angular_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_DRIVER_MESSAGE_ARCMOVEGOAL_H
