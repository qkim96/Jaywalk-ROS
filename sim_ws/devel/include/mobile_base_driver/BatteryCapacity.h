// Generated by gencpp from file mobile_base_driver/BatteryCapacity.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_DRIVER_MESSAGE_BATTERYCAPACITY_H
#define MOBILE_BASE_DRIVER_MESSAGE_BATTERYCAPACITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_base_driver
{
template <class ContainerAllocator>
struct BatteryCapacity_
{
  typedef BatteryCapacity_<ContainerAllocator> Type;

  BatteryCapacity_()
    : mAh(0)
    , pct(0)
    , rounded_pct(0)  {
    }
  BatteryCapacity_(const ContainerAllocator& _alloc)
    : mAh(0)
    , pct(0)
    , rounded_pct(0)  {
  (void)_alloc;
    }



   typedef int16_t _mAh_type;
  _mAh_type mAh;

   typedef int8_t _pct_type;
  _pct_type pct;

   typedef int8_t _rounded_pct_type;
  _rounded_pct_type rounded_pct;





  typedef boost::shared_ptr< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryCapacity_

typedef ::mobile_base_driver::BatteryCapacity_<std::allocator<void> > BatteryCapacity;

typedef boost::shared_ptr< ::mobile_base_driver::BatteryCapacity > BatteryCapacityPtr;
typedef boost::shared_ptr< ::mobile_base_driver::BatteryCapacity const> BatteryCapacityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator1> & lhs, const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator2> & rhs)
{
  return lhs.mAh == rhs.mAh &&
    lhs.pct == rhs.pct &&
    lhs.rounded_pct == rhs.rounded_pct;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator1> & lhs, const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44e1b0249db4fca04e974c31a68c58b0";
  }

  static const char* value(const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44e1b0249db4fca0ULL;
  static const uint64_t static_value2 = 0x4e974c31a68c58b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base_driver/BatteryCapacity";
  }

  static const char* value(const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 mAh\n"
"int8 pct\n"
"int8 rounded_pct # capacity percentage estimate, rounded to the nearest 5 and\n"
"                 # subjected to hysteresis so it can only change if the value has\n"
"                 # changed by at least 5\n"
;
  }

  static const char* value(const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mAh);
      stream.next(m.pct);
      stream.next(m.rounded_pct);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryCapacity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base_driver::BatteryCapacity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base_driver::BatteryCapacity_<ContainerAllocator>& v)
  {
    s << indent << "mAh: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mAh);
    s << indent << "pct: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pct);
    s << indent << "rounded_pct: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rounded_pct);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_DRIVER_MESSAGE_BATTERYCAPACITY_H
