// Generated by gencpp from file mobile_base_driver/CliffSensor.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_DRIVER_MESSAGE_CLIFFSENSOR_H
#define MOBILE_BASE_DRIVER_MESSAGE_CLIFFSENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_base_driver
{
template <class ContainerAllocator>
struct CliffSensor_
{
  typedef CliffSensor_<ContainerAllocator> Type;

  CliffSensor_()
    : sensor(0)
    , state(0)
    , distance(0.0)
    , return_rate(0.0)  {
    }
  CliffSensor_(const ContainerAllocator& _alloc)
    : sensor(0)
    , state(0)
    , distance(0.0)
    , return_rate(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _sensor_type;
  _sensor_type sensor;

   typedef uint8_t _state_type;
  _state_type state;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _return_rate_type;
  _return_rate_type return_rate;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif
#if defined(_WIN32) && defined(MIDRIGHT)
  #undef MIDRIGHT
#endif
#if defined(_WIN32) && defined(MIDLEFT)
  #undef MIDLEFT
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(BACKLEFT)
  #undef BACKLEFT
#endif
#if defined(_WIN32) && defined(BACKRIGHT)
  #undef BACKRIGHT
#endif
#if defined(_WIN32) && defined(FLOOR)
  #undef FLOOR
#endif
#if defined(_WIN32) && defined(CLIFF)
  #undef CLIFF
#endif

  enum {
    RIGHT = 0u,
    MIDRIGHT = 1u,
    MIDLEFT = 2u,
    LEFT = 3u,
    BACKLEFT = 4u,
    BACKRIGHT = 5u,
    FLOOR = 0u,
    CLIFF = 1u,
  };


  typedef boost::shared_ptr< ::mobile_base_driver::CliffSensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base_driver::CliffSensor_<ContainerAllocator> const> ConstPtr;

}; // struct CliffSensor_

typedef ::mobile_base_driver::CliffSensor_<std::allocator<void> > CliffSensor;

typedef boost::shared_ptr< ::mobile_base_driver::CliffSensor > CliffSensorPtr;
typedef boost::shared_ptr< ::mobile_base_driver::CliffSensor const> CliffSensorConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base_driver::CliffSensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_base_driver::CliffSensor_<ContainerAllocator1> & lhs, const ::mobile_base_driver::CliffSensor_<ContainerAllocator2> & rhs)
{
  return lhs.sensor == rhs.sensor &&
    lhs.state == rhs.state &&
    lhs.distance == rhs.distance &&
    lhs.return_rate == rhs.return_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_base_driver::CliffSensor_<ContainerAllocator1> & lhs, const ::mobile_base_driver::CliffSensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::CliffSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::CliffSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::CliffSensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df8e935c1e6098b4bc39e9a6c6ab00d2";
  }

  static const char* value(const ::mobile_base_driver::CliffSensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf8e935c1e6098b4ULL;
  static const uint64_t static_value2 = 0xbc39e9a6c6ab00d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base_driver/CliffSensor";
  }

  static const char* value(const ::mobile_base_driver::CliffSensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Provides a cliff sensor reading\n"
"# This message is generated whenever a particular cliff sensor signals that the\n"
"# robot approaches or moves away from a cliff.\n"
"\n"
"# cliff sensor\n"
"uint8 RIGHT     = 0\n"
"uint8 MIDRIGHT  = 1\n"
"uint8 MIDLEFT   = 2\n"
"uint8 LEFT      = 3\n"
"uint8 BACKLEFT  = 4\n"
"uint8 BACKRIGHT = 5\n"
"\n"
"# cliff sensor state\n"
"uint8 FLOOR = 0\n"
"uint8 CLIFF = 1\n"
"\n"
"uint8 sensor\n"
"uint8 state\n"
"\n"
"# distance to floor when cliff was detected\n"
"float32 distance\n"
"\n"
"# return rate from the vl6180x, rear cliff sensors only\n"
"float32 return_rate\n"
;
  }

  static const char* value(const ::mobile_base_driver::CliffSensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor);
      stream.next(m.state);
      stream.next(m.distance);
      stream.next(m.return_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CliffSensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base_driver::CliffSensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base_driver::CliffSensor_<ContainerAllocator>& v)
  {
    s << indent << "sensor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "return_rate: ";
    Printer<float>::stream(s, indent + "  ", v.return_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_DRIVER_MESSAGE_CLIFFSENSOR_H
