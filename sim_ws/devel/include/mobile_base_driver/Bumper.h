// Generated by gencpp from file mobile_base_driver/Bumper.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_DRIVER_MESSAGE_BUMPER_H
#define MOBILE_BASE_DRIVER_MESSAGE_BUMPER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_base_driver
{
template <class ContainerAllocator>
struct Bumper_
{
  typedef Bumper_<ContainerAllocator> Type;

  Bumper_()
    : bumper(0)
    , state(0)  {
    }
  Bumper_(const ContainerAllocator& _alloc)
    : bumper(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _bumper_type;
  _bumper_type bumper;

   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif
#if defined(_WIN32) && defined(CENTER)
  #undef CENTER
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(RELEASED)
  #undef RELEASED
#endif
#if defined(_WIN32) && defined(PRESSED)
  #undef PRESSED
#endif

  enum {
    RIGHT = 0u,
    CENTER = 1u,
    LEFT = 2u,
    RELEASED = 0u,
    PRESSED = 1u,
  };


  typedef boost::shared_ptr< ::mobile_base_driver::Bumper_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base_driver::Bumper_<ContainerAllocator> const> ConstPtr;

}; // struct Bumper_

typedef ::mobile_base_driver::Bumper_<std::allocator<void> > Bumper;

typedef boost::shared_ptr< ::mobile_base_driver::Bumper > BumperPtr;
typedef boost::shared_ptr< ::mobile_base_driver::Bumper const> BumperConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base_driver::Bumper_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base_driver::Bumper_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_base_driver::Bumper_<ContainerAllocator1> & lhs, const ::mobile_base_driver::Bumper_<ContainerAllocator2> & rhs)
{
  return lhs.bumper == rhs.bumper &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_base_driver::Bumper_<ContainerAllocator1> & lhs, const ::mobile_base_driver::Bumper_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::Bumper_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::Bumper_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::Bumper_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::Bumper_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::Bumper_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::Bumper_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base_driver::Bumper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96ae89263ef90e8520c31ccfe1d3540a";
  }

  static const char* value(const ::mobile_base_driver::Bumper_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96ae89263ef90e85ULL;
  static const uint64_t static_value2 = 0x20c31ccfe1d3540aULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base_driver::Bumper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base_driver/Bumper";
  }

  static const char* value(const ::mobile_base_driver::Bumper_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base_driver::Bumper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Provides a bumper stae\n"
"\n"
"# bumper\n"
"uint8 RIGHT     = 0\n"
"uint8 CENTER    = 1\n"
"uint8 LEFT      = 2\n"
"\n"
"# bumper state\n"
"uint8 RELEASED = 0\n"
"uint8 PRESSED = 1\n"
"\n"
"uint8 bumper\n"
"uint8 state\n"
;
  }

  static const char* value(const ::mobile_base_driver::Bumper_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base_driver::Bumper_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bumper);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bumper_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base_driver::Bumper_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base_driver::Bumper_<ContainerAllocator>& v)
  {
    s << indent << "bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bumper);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_DRIVER_MESSAGE_BUMPER_H
