// Generated by gencpp from file mobile_base_driver/Touch.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_DRIVER_MESSAGE_TOUCH_H
#define MOBILE_BASE_DRIVER_MESSAGE_TOUCH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_base_driver
{
template <class ContainerAllocator>
struct Touch_
{
  typedef Touch_<ContainerAllocator> Type;

  Touch_()
    : electrodes()  {
    }
  Touch_(const ContainerAllocator& _alloc)
    : electrodes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _electrodes_type;
  _electrodes_type electrodes;





  typedef boost::shared_ptr< ::mobile_base_driver::Touch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base_driver::Touch_<ContainerAllocator> const> ConstPtr;

}; // struct Touch_

typedef ::mobile_base_driver::Touch_<std::allocator<void> > Touch;

typedef boost::shared_ptr< ::mobile_base_driver::Touch > TouchPtr;
typedef boost::shared_ptr< ::mobile_base_driver::Touch const> TouchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base_driver::Touch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base_driver::Touch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_base_driver::Touch_<ContainerAllocator1> & lhs, const ::mobile_base_driver::Touch_<ContainerAllocator2> & rhs)
{
  return lhs.electrodes == rhs.electrodes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_base_driver::Touch_<ContainerAllocator1> & lhs, const ::mobile_base_driver::Touch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::Touch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::Touch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::Touch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::Touch_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::Touch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::Touch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base_driver::Touch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45f8d1c4c44dcc7ee376d119a02375bb";
  }

  static const char* value(const ::mobile_base_driver::Touch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45f8d1c4c44dcc7eULL;
  static const uint64_t static_value2 = 0xe376d119a02375bbULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base_driver::Touch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base_driver/Touch";
  }

  static const char* value(const ::mobile_base_driver::Touch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base_driver::Touch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# true means touched\n"
"# [FRONT_LEFT, LEFT, REAR_LEFT, CENTER, FRONT, REAR_RIGHT, RIGHT, FRONT_RIGHT]\n"
"bool[] electrodes\n"
;
  }

  static const char* value(const ::mobile_base_driver::Touch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base_driver::Touch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.electrodes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Touch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base_driver::Touch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base_driver::Touch_<ContainerAllocator>& v)
  {
    s << indent << "electrodes[]" << std::endl;
    for (size_t i = 0; i < v.electrodes.size(); ++i)
    {
      s << indent << "  electrodes[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.electrodes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_DRIVER_MESSAGE_TOUCH_H
