// Generated by gencpp from file mobile_base_driver/SafetyStatus.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_DRIVER_MESSAGE_SAFETYSTATUS_H
#define MOBILE_BASE_DRIVER_MESSAGE_SAFETYSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_base_driver
{
template <class ContainerAllocator>
struct SafetyStatus_
{
  typedef SafetyStatus_<ContainerAllocator> Type;

  SafetyStatus_()
    : status(0)  {
    }
  SafetyStatus_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint32_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HB_bp)
  #undef HB_bp
#endif
#if defined(_WIN32) && defined(CFHW_bp)
  #undef CFHW_bp
#endif
#if defined(_WIN32) && defined(CF0_bp)
  #undef CF0_bp
#endif
#if defined(_WIN32) && defined(CF1_bp)
  #undef CF1_bp
#endif
#if defined(_WIN32) && defined(CF2_bp)
  #undef CF2_bp
#endif
#if defined(_WIN32) && defined(CF3_bp)
  #undef CF3_bp
#endif
#if defined(_WIN32) && defined(CF4_bp)
  #undef CF4_bp
#endif
#if defined(_WIN32) && defined(CF5_bp)
  #undef CF5_bp
#endif
#if defined(_WIN32) && defined(DP_bp)
  #undef DP_bp
#endif
#if defined(_WIN32) && defined(BPR_bp)
  #undef BPR_bp
#endif
#if defined(_WIN32) && defined(BPM_bp)
  #undef BPM_bp
#endif
#if defined(_WIN32) && defined(BPL_bp)
  #undef BPL_bp
#endif
#if defined(_WIN32) && defined(CLL_bp)
  #undef CLL_bp
#endif

  enum {
    HB_bp = 0,
    CFHW_bp = 1,
    CF0_bp = 2,
    CF1_bp = 3,
    CF2_bp = 4,
    CF3_bp = 5,
    CF4_bp = 6,
    CF5_bp = 7,
    DP_bp = 8,
    BPR_bp = 10,
    BPM_bp = 11,
    BPL_bp = 12,
    CLL_bp = 13,
  };


  typedef boost::shared_ptr< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyStatus_

typedef ::mobile_base_driver::SafetyStatus_<std::allocator<void> > SafetyStatus;

typedef boost::shared_ptr< ::mobile_base_driver::SafetyStatus > SafetyStatusPtr;
typedef boost::shared_ptr< ::mobile_base_driver::SafetyStatus const> SafetyStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base_driver::SafetyStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_base_driver::SafetyStatus_<ContainerAllocator1> & lhs, const ::mobile_base_driver::SafetyStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_base_driver::SafetyStatus_<ContainerAllocator1> & lhs, const ::mobile_base_driver::SafetyStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d125b2e4a510271c37ef066dc9d6c0de";
  }

  static const char* value(const ::mobile_base_driver::SafetyStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd125b2e4a510271cULL;
  static const uint64_t static_value2 = 0x37ef066dc9d6c0deULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base_driver/SafetyStatus";
  }

  static const char* value(const ::mobile_base_driver::SafetyStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# bit positions, same as in iris_comm\n"
"int8 HB_bp   = 0  			# Heartbeat\n"
"int8 CFHW_bp = 1			# Cliff to Motor Control HW\n"
"int8 CF0_bp  = 2			# Cliff 0\n"
"int8 CF1_bp  = 3			# Cliff 1\n"
"int8 CF2_bp  = 4			# Cliff 2\n"
"int8 CF3_bp  = 5			# Cliff 3\n"
"int8 CF4_bp  = 6			# Cliff 4\n"
"int8 CF5_bp  = 7			# Cliff 5\n"
"int8 DP_bp  = 8			# Drop Right and Left\n"
"int8 BPR_bp  = 10			# Bump Right\n"
"int8 BPM_bp  = 11			# Bump Middle\n"
"int8 BPL_bp  = 12			# Bump Left\n"
"int8 CLL_bp  = 13			# Clothesline\n"
"\n"
"uint32 status\n"
;
  }

  static const char* value(const ::mobile_base_driver::SafetyStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base_driver::SafetyStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base_driver::SafetyStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_DRIVER_MESSAGE_SAFETYSTATUS_H
