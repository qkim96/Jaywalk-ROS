// Generated by gencpp from file mobile_base_driver/Telescope.msg
// DO NOT EDIT!


#ifndef MOBILE_BASE_DRIVER_MESSAGE_TELESCOPE_H
#define MOBILE_BASE_DRIVER_MESSAGE_TELESCOPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mobile_base_driver
{
template <class ContainerAllocator>
struct Telescope_
{
  typedef Telescope_<ContainerAllocator> Type;

  Telescope_()
    : header()
    , front_noise(false)
    , front_left(false)
    , front_right(false)
    , front_middle(false)
    , back_noise(false)
    , back_left(false)
    , back_right(false)
    , back_middle(false)  {
    }
  Telescope_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , front_noise(false)
    , front_left(false)
    , front_right(false)
    , front_middle(false)
    , back_noise(false)
    , back_left(false)
    , back_right(false)
    , back_middle(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _front_noise_type;
  _front_noise_type front_noise;

   typedef uint8_t _front_left_type;
  _front_left_type front_left;

   typedef uint8_t _front_right_type;
  _front_right_type front_right;

   typedef uint8_t _front_middle_type;
  _front_middle_type front_middle;

   typedef uint8_t _back_noise_type;
  _back_noise_type back_noise;

   typedef uint8_t _back_left_type;
  _back_left_type back_left;

   typedef uint8_t _back_right_type;
  _back_right_type back_right;

   typedef uint8_t _back_middle_type;
  _back_middle_type back_middle;





  typedef boost::shared_ptr< ::mobile_base_driver::Telescope_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base_driver::Telescope_<ContainerAllocator> const> ConstPtr;

}; // struct Telescope_

typedef ::mobile_base_driver::Telescope_<std::allocator<void> > Telescope;

typedef boost::shared_ptr< ::mobile_base_driver::Telescope > TelescopePtr;
typedef boost::shared_ptr< ::mobile_base_driver::Telescope const> TelescopeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_base_driver::Telescope_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_base_driver::Telescope_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_base_driver::Telescope_<ContainerAllocator1> & lhs, const ::mobile_base_driver::Telescope_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.front_noise == rhs.front_noise &&
    lhs.front_left == rhs.front_left &&
    lhs.front_right == rhs.front_right &&
    lhs.front_middle == rhs.front_middle &&
    lhs.back_noise == rhs.back_noise &&
    lhs.back_left == rhs.back_left &&
    lhs.back_right == rhs.back_right &&
    lhs.back_middle == rhs.back_middle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_base_driver::Telescope_<ContainerAllocator1> & lhs, const ::mobile_base_driver::Telescope_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::Telescope_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_base_driver::Telescope_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::Telescope_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_base_driver::Telescope_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::Telescope_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_base_driver::Telescope_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_base_driver::Telescope_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d73db4ad7bf87689fa1b86ed4b74ff85";
  }

  static const char* value(const ::mobile_base_driver::Telescope_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd73db4ad7bf87689ULL;
  static const uint64_t static_value2 = 0xfa1b86ed4b74ff85ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base_driver::Telescope_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_base_driver/Telescope";
  }

  static const char* value(const ::mobile_base_driver::Telescope_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_base_driver::Telescope_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"bool front_noise\n"
"bool front_left\n"
"bool front_right\n"
"bool front_middle\n"
"bool back_noise\n"
"bool back_left\n"
"bool back_right\n"
"bool back_middle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mobile_base_driver::Telescope_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_base_driver::Telescope_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.front_noise);
      stream.next(m.front_left);
      stream.next(m.front_right);
      stream.next(m.front_middle);
      stream.next(m.back_noise);
      stream.next(m.back_left);
      stream.next(m.back_right);
      stream.next(m.back_middle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Telescope_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base_driver::Telescope_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_base_driver::Telescope_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "front_noise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_noise);
    s << indent << "front_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_left);
    s << indent << "front_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_right);
    s << indent << "front_middle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_middle);
    s << indent << "back_noise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_noise);
    s << indent << "back_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_left);
    s << indent << "back_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_right);
    s << indent << "back_middle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_middle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_DRIVER_MESSAGE_TELESCOPE_H
