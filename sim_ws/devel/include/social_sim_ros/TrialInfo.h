// Generated by gencpp from file social_sim_ros/TrialInfo.msg
// DO NOT EDIT!


#ifndef SOCIAL_SIM_ROS_MESSAGE_TRIALINFO_H
#define SOCIAL_SIM_ROS_MESSAGE_TRIALINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace social_sim_ros
{
template <class ContainerAllocator>
struct TrialInfo_
{
  typedef TrialInfo_<ContainerAllocator> Type;

  TrialInfo_()
    : header()
    , trial_start()
    , timeout_time(0.0)
    , trial_name()
    , trial_number(0)
    , num_actors(0)
    , robot_start()
    , robot_goal()
    , dist_to_target(0.0)
    , min_dist_to_target(0.0)
    , robot_poses()
    , robot_poses_ts()
    , min_dist_to_ped(0.0)
    , robot_on_person_intimate_dist_violations(0)
    , person_on_robot_intimate_dist_violations(0)
    , robot_on_person_personal_dist_violations(0)
    , person_on_robot_personal_dist_violations(0)
    , robot_on_person_collisions(0)
    , person_on_robot_collisions(0)
    , obj_collisions(0)  {
    }
  TrialInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trial_start()
    , timeout_time(0.0)
    , trial_name(_alloc)
    , trial_number(0)
    , num_actors(0)
    , robot_start(_alloc)
    , robot_goal(_alloc)
    , dist_to_target(0.0)
    , min_dist_to_target(0.0)
    , robot_poses(_alloc)
    , robot_poses_ts(_alloc)
    , min_dist_to_ped(0.0)
    , robot_on_person_intimate_dist_violations(0)
    , person_on_robot_intimate_dist_violations(0)
    , robot_on_person_personal_dist_violations(0)
    , person_on_robot_personal_dist_violations(0)
    , robot_on_person_collisions(0)
    , person_on_robot_collisions(0)
    , obj_collisions(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _trial_start_type;
  _trial_start_type trial_start;

   typedef double _timeout_time_type;
  _timeout_time_type timeout_time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _trial_name_type;
  _trial_name_type trial_name;

   typedef uint16_t _trial_number_type;
  _trial_number_type trial_number;

   typedef uint32_t _num_actors_type;
  _num_actors_type num_actors;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _robot_start_type;
  _robot_start_type robot_start;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _robot_goal_type;
  _robot_goal_type robot_goal;

   typedef double _dist_to_target_type;
  _dist_to_target_type dist_to_target;

   typedef double _min_dist_to_target_type;
  _min_dist_to_target_type min_dist_to_target;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _robot_poses_type;
  _robot_poses_type robot_poses;

   typedef std::vector<ros::Time, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<ros::Time>> _robot_poses_ts_type;
  _robot_poses_ts_type robot_poses_ts;

   typedef double _min_dist_to_ped_type;
  _min_dist_to_ped_type min_dist_to_ped;

   typedef uint32_t _robot_on_person_intimate_dist_violations_type;
  _robot_on_person_intimate_dist_violations_type robot_on_person_intimate_dist_violations;

   typedef uint32_t _person_on_robot_intimate_dist_violations_type;
  _person_on_robot_intimate_dist_violations_type person_on_robot_intimate_dist_violations;

   typedef uint32_t _robot_on_person_personal_dist_violations_type;
  _robot_on_person_personal_dist_violations_type robot_on_person_personal_dist_violations;

   typedef uint32_t _person_on_robot_personal_dist_violations_type;
  _person_on_robot_personal_dist_violations_type person_on_robot_personal_dist_violations;

   typedef uint32_t _robot_on_person_collisions_type;
  _robot_on_person_collisions_type robot_on_person_collisions;

   typedef uint32_t _person_on_robot_collisions_type;
  _person_on_robot_collisions_type person_on_robot_collisions;

   typedef uint32_t _obj_collisions_type;
  _obj_collisions_type obj_collisions;





  typedef boost::shared_ptr< ::social_sim_ros::TrialInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::social_sim_ros::TrialInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TrialInfo_

typedef ::social_sim_ros::TrialInfo_<std::allocator<void> > TrialInfo;

typedef boost::shared_ptr< ::social_sim_ros::TrialInfo > TrialInfoPtr;
typedef boost::shared_ptr< ::social_sim_ros::TrialInfo const> TrialInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::social_sim_ros::TrialInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::social_sim_ros::TrialInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::social_sim_ros::TrialInfo_<ContainerAllocator1> & lhs, const ::social_sim_ros::TrialInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.trial_start == rhs.trial_start &&
    lhs.timeout_time == rhs.timeout_time &&
    lhs.trial_name == rhs.trial_name &&
    lhs.trial_number == rhs.trial_number &&
    lhs.num_actors == rhs.num_actors &&
    lhs.robot_start == rhs.robot_start &&
    lhs.robot_goal == rhs.robot_goal &&
    lhs.dist_to_target == rhs.dist_to_target &&
    lhs.min_dist_to_target == rhs.min_dist_to_target &&
    lhs.robot_poses == rhs.robot_poses &&
    lhs.robot_poses_ts == rhs.robot_poses_ts &&
    lhs.min_dist_to_ped == rhs.min_dist_to_ped &&
    lhs.robot_on_person_intimate_dist_violations == rhs.robot_on_person_intimate_dist_violations &&
    lhs.person_on_robot_intimate_dist_violations == rhs.person_on_robot_intimate_dist_violations &&
    lhs.robot_on_person_personal_dist_violations == rhs.robot_on_person_personal_dist_violations &&
    lhs.person_on_robot_personal_dist_violations == rhs.person_on_robot_personal_dist_violations &&
    lhs.robot_on_person_collisions == rhs.robot_on_person_collisions &&
    lhs.person_on_robot_collisions == rhs.person_on_robot_collisions &&
    lhs.obj_collisions == rhs.obj_collisions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::social_sim_ros::TrialInfo_<ContainerAllocator1> & lhs, const ::social_sim_ros::TrialInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace social_sim_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::social_sim_ros::TrialInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::social_sim_ros::TrialInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::social_sim_ros::TrialInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::social_sim_ros::TrialInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::social_sim_ros::TrialInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::social_sim_ros::TrialInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::social_sim_ros::TrialInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8f0eee793947e51716938ffff8f8195";
  }

  static const char* value(const ::social_sim_ros::TrialInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8f0eee793947e51ULL;
  static const uint64_t static_value2 = 0x716938ffff8f8195ULL;
};

template<class ContainerAllocator>
struct DataType< ::social_sim_ros::TrialInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "social_sim_ros/TrialInfo";
  }

  static const char* value(const ::social_sim_ros::TrialInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::social_sim_ros::TrialInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message containing the information of running a single A-B navigation trial\n"
"\n"
"Header                    header\n"
"\n"
"# Information about the current interaction\n"
"time                      trial_start                                    # When did we start tracking metrics for this trial\n"
"float64                   timeout_time                                   # How long is allowed for the episode have to complete?\n"
"string                    trial_name                                     # Which trial name are we running\n"
"uint16                    trial_number                                   # Which trial number are we running\n"
"uint32                    num_actors                                     # How many people in the scene?\n"
"\n"
"# Robot start / goal locations\n"
"geometry_msgs/Pose        robot_start\n"
"geometry_msgs/Pose        robot_goal\n"
"\n"
"# Robot location / distance relative to start / goal\n"
"float64                   dist_to_target                                 # Current distance to target\n"
"float64                   min_dist_to_target                             # Closest difference to the target the robot has come\n"
"geometry_msgs/Pose[]      robot_poses                                    # Poses of the robot over the episode\n"
"time[]                    robot_poses_ts                                 # Timestamps of the robot poses over the episode\n"
"\n"
"# Robot location relative to pedestrians\n"
"float64                   min_dist_to_ped                                # Minimum distance to any pedestrian throughout the trial\n"
"\n"
"# Collisions between robots and people\n"
"uint32                    robot_on_person_intimate_dist_violations       # Robot passes w/in the intimate distance of a pedestrian\n"
"uint32                    person_on_robot_intimate_dist_violations       # A person passes w/in the intimate distance of the robot\n"
"uint32                    robot_on_person_personal_dist_violations       # Robot passes w/in the personal distance of a pedestrian\n"
"uint32                    person_on_robot_personal_dist_violations       # A person passes w/in the personal distance of the robot\n"
"uint32                    robot_on_person_collisions                     # Number of times that the robot collided with a person\n"
"uint32                    person_on_robot_collisions                     # Number of times that ap person collided with the robot\n"
"\n"
"# Collisions w/ static objects\n"
"uint32                    obj_collisions                                 # Number of times that the robot collided with a static object\n"
"\n"
"# Computed post-hoc\n"
"#bool                     completed                                      # was the robots finals distance to the goal within the desired distance?\n"
"#float64                  targ_dist_norm                                 # dist_to_target normalized by path length\n"
"#float64                  path_length                                    # Approximate distance traveled by robot\n"
"#float64                  mean_dist_to_target_not_moving                 # How far away from the target was the robot while not moving\n"
"#float64                  time_not_moving                                # Seconds the robot was not moving. Computed by checking if the robot moved more than 0.05m since a check the last 1s ago. If not, accumulate the time since the last check.\n"
"#bool                     episode_timed_out\n"
"#float64                  path_irregularity\n"
"#float64                  path_efficiency\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::social_sim_ros::TrialInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::social_sim_ros::TrialInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trial_start);
      stream.next(m.timeout_time);
      stream.next(m.trial_name);
      stream.next(m.trial_number);
      stream.next(m.num_actors);
      stream.next(m.robot_start);
      stream.next(m.robot_goal);
      stream.next(m.dist_to_target);
      stream.next(m.min_dist_to_target);
      stream.next(m.robot_poses);
      stream.next(m.robot_poses_ts);
      stream.next(m.min_dist_to_ped);
      stream.next(m.robot_on_person_intimate_dist_violations);
      stream.next(m.person_on_robot_intimate_dist_violations);
      stream.next(m.robot_on_person_personal_dist_violations);
      stream.next(m.person_on_robot_personal_dist_violations);
      stream.next(m.robot_on_person_collisions);
      stream.next(m.person_on_robot_collisions);
      stream.next(m.obj_collisions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrialInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::social_sim_ros::TrialInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::social_sim_ros::TrialInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trial_start: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.trial_start);
    s << indent << "timeout_time: ";
    Printer<double>::stream(s, indent + "  ", v.timeout_time);
    s << indent << "trial_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.trial_name);
    s << indent << "trial_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.trial_number);
    s << indent << "num_actors: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_actors);
    s << indent << "robot_start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_start);
    s << indent << "robot_goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_goal);
    s << indent << "dist_to_target: ";
    Printer<double>::stream(s, indent + "  ", v.dist_to_target);
    s << indent << "min_dist_to_target: ";
    Printer<double>::stream(s, indent + "  ", v.min_dist_to_target);
    s << indent << "robot_poses[]" << std::endl;
    for (size_t i = 0; i < v.robot_poses.size(); ++i)
    {
      s << indent << "  robot_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.robot_poses[i]);
    }
    s << indent << "robot_poses_ts[]" << std::endl;
    for (size_t i = 0; i < v.robot_poses_ts.size(); ++i)
    {
      s << indent << "  robot_poses_ts[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.robot_poses_ts[i]);
    }
    s << indent << "min_dist_to_ped: ";
    Printer<double>::stream(s, indent + "  ", v.min_dist_to_ped);
    s << indent << "robot_on_person_intimate_dist_violations: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot_on_person_intimate_dist_violations);
    s << indent << "person_on_robot_intimate_dist_violations: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.person_on_robot_intimate_dist_violations);
    s << indent << "robot_on_person_personal_dist_violations: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot_on_person_personal_dist_violations);
    s << indent << "person_on_robot_personal_dist_violations: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.person_on_robot_personal_dist_violations);
    s << indent << "robot_on_person_collisions: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot_on_person_collisions);
    s << indent << "person_on_robot_collisions: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.person_on_robot_collisions);
    s << indent << "obj_collisions: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.obj_collisions);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOCIAL_SIM_ROS_MESSAGE_TRIALINFO_H
