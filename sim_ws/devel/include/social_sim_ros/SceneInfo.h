// Generated by gencpp from file social_sim_ros/SceneInfo.msg
// DO NOT EDIT!


#ifndef SOCIAL_SIM_ROS_MESSAGE_SCENEINFO_H
#define SOCIAL_SIM_ROS_MESSAGE_SCENEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace social_sim_ros
{
template <class ContainerAllocator>
struct SceneInfo_
{
  typedef SceneInfo_<ContainerAllocator> Type;

  SceneInfo_()
    : header()
    , scenario_name()
    , robot_start_pose()
    , robot_target_pose()
    , num_people(0)
    , num_groups(0)
    , environment()  {
    }
  SceneInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , scenario_name(_alloc)
    , robot_start_pose(_alloc)
    , robot_target_pose(_alloc)
    , num_people(0)
    , num_groups(0)
    , environment(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _scenario_name_type;
  _scenario_name_type scenario_name;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _robot_start_pose_type;
  _robot_start_pose_type robot_start_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _robot_target_pose_type;
  _robot_target_pose_type robot_target_pose;

   typedef uint16_t _num_people_type;
  _num_people_type num_people;

   typedef uint16_t _num_groups_type;
  _num_groups_type num_groups;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _environment_type;
  _environment_type environment;





  typedef boost::shared_ptr< ::social_sim_ros::SceneInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::social_sim_ros::SceneInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SceneInfo_

typedef ::social_sim_ros::SceneInfo_<std::allocator<void> > SceneInfo;

typedef boost::shared_ptr< ::social_sim_ros::SceneInfo > SceneInfoPtr;
typedef boost::shared_ptr< ::social_sim_ros::SceneInfo const> SceneInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::social_sim_ros::SceneInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::social_sim_ros::SceneInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::social_sim_ros::SceneInfo_<ContainerAllocator1> & lhs, const ::social_sim_ros::SceneInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.scenario_name == rhs.scenario_name &&
    lhs.robot_start_pose == rhs.robot_start_pose &&
    lhs.robot_target_pose == rhs.robot_target_pose &&
    lhs.num_people == rhs.num_people &&
    lhs.num_groups == rhs.num_groups &&
    lhs.environment == rhs.environment;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::social_sim_ros::SceneInfo_<ContainerAllocator1> & lhs, const ::social_sim_ros::SceneInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace social_sim_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::social_sim_ros::SceneInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::social_sim_ros::SceneInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::social_sim_ros::SceneInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::social_sim_ros::SceneInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::social_sim_ros::SceneInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::social_sim_ros::SceneInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::social_sim_ros::SceneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5da53b93f7c64fcba0abe30ec331516b";
  }

  static const char* value(const ::social_sim_ros::SceneInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5da53b93f7c64fcbULL;
  static const uint64_t static_value2 = 0xa0abe30ec331516bULL;
};

template<class ContainerAllocator>
struct DataType< ::social_sim_ros::SceneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "social_sim_ros/SceneInfo";
  }

  static const char* value(const ::social_sim_ros::SceneInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::social_sim_ros::SceneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message containing the parameters for Unity Scene trials\n"
"\n"
"Header                  header\n"
"string                  scenario_name        # Which scene we are running\n"
"geometry_msgs/Pose      robot_start_pose     # Pose of robot start location\n"
"geometry_msgs/Pose      robot_target_pose    # Pose of robot target location\n"
"uint16                  num_people           # Number of people in scene\n"
"uint16                  num_groups           # Number of groups in scene\n"
"string                  environment          # Which environment\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::social_sim_ros::SceneInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::social_sim_ros::SceneInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.scenario_name);
      stream.next(m.robot_start_pose);
      stream.next(m.robot_target_pose);
      stream.next(m.num_people);
      stream.next(m.num_groups);
      stream.next(m.environment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SceneInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::social_sim_ros::SceneInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::social_sim_ros::SceneInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "scenario_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.scenario_name);
    s << indent << "robot_start_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_start_pose);
    s << indent << "robot_target_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_target_pose);
    s << indent << "num_people: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_people);
    s << indent << "num_groups: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_groups);
    s << indent << "environment: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.environment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOCIAL_SIM_ROS_MESSAGE_SCENEINFO_H
