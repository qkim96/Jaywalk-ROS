// Generated by gencpp from file may_nav_msgs/NavigateFeedback.msg
// DO NOT EDIT!


#ifndef MAY_NAV_MSGS_MESSAGE_NAVIGATEFEEDBACK_H
#define MAY_NAV_MSGS_MESSAGE_NAVIGATEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Pose2D.h>

namespace may_nav_msgs
{
template <class ContainerAllocator>
struct NavigateFeedback_
{
  typedef NavigateFeedback_<ContainerAllocator> Type;

  NavigateFeedback_()
    : state()
    , state_machine_state()
    , target_pose()
    , cmd_vel()
    , has_bumped(false)
    , num_replans(0)
    , replan_failure_occurred(false)  {
    }
  NavigateFeedback_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , state_machine_state(_alloc)
    , target_pose(_alloc)
    , cmd_vel(_alloc)
    , has_bumped(false)
    , num_replans(0)
    , replan_failure_occurred(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_machine_state_type;
  _state_machine_state_type state_machine_state;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _target_pose_type;
  _target_pose_type target_pose;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _cmd_vel_type;
  _cmd_vel_type cmd_vel;

   typedef uint8_t _has_bumped_type;
  _has_bumped_type has_bumped;

   typedef uint32_t _num_replans_type;
  _num_replans_type num_replans;

   typedef uint8_t _replan_failure_occurred_type;
  _replan_failure_occurred_type replan_failure_occurred;





  typedef boost::shared_ptr< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct NavigateFeedback_

typedef ::may_nav_msgs::NavigateFeedback_<std::allocator<void> > NavigateFeedback;

typedef boost::shared_ptr< ::may_nav_msgs::NavigateFeedback > NavigateFeedbackPtr;
typedef boost::shared_ptr< ::may_nav_msgs::NavigateFeedback const> NavigateFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator1> & lhs, const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.state_machine_state == rhs.state_machine_state &&
    lhs.target_pose == rhs.target_pose &&
    lhs.cmd_vel == rhs.cmd_vel &&
    lhs.has_bumped == rhs.has_bumped &&
    lhs.num_replans == rhs.num_replans &&
    lhs.replan_failure_occurred == rhs.replan_failure_occurred;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator1> & lhs, const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace may_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93b607f29b90c517db4c9c6c8eb188e9";
  }

  static const char* value(const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93b607f29b90c517ULL;
  static const uint64_t static_value2 = 0xdb4c9c6c8eb188e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "may_nav_msgs/NavigateFeedback";
  }

  static const char* value(const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#State fed back to ios (Controlling, Planning, etc)\n"
"string state\n"
"#Current state of may_nav's state machine\n"
"string state_machine_state\n"
"\n"
"#target pose is the target_pose set by the local planner\n"
"geometry_msgs/Pose2D target_pose\n"
"geometry_msgs/Pose2D cmd_vel\n"
"#has_bumped is set to true when the bump sensor message has been received by may_nav\n"
"bool has_bumped\n"
"uint32 num_replans\n"
"bool replan_failure_occurred\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.state_machine_state);
      stream.next(m.target_pose);
      stream.next(m.cmd_vel);
      stream.next(m.has_bumped);
      stream.next(m.num_replans);
      stream.next(m.replan_failure_occurred);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigateFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::may_nav_msgs::NavigateFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::may_nav_msgs::NavigateFeedback_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state);
    s << indent << "state_machine_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state_machine_state);
    s << indent << "target_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.target_pose);
    s << indent << "cmd_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd_vel);
    s << indent << "has_bumped: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_bumped);
    s << indent << "num_replans: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_replans);
    s << indent << "replan_failure_occurred: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.replan_failure_occurred);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAY_NAV_MSGS_MESSAGE_NAVIGATEFEEDBACK_H
