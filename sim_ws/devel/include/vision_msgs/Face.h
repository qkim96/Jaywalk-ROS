// Generated by gencpp from file vision_msgs/Face.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_FACE_H
#define VISION_MSGS_MESSAGE_FACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct Face_
{
  typedef Face_<ContainerAllocator> Type;

  Face_()
    : header()
    , id()
    , capture_time()
    , timetrack()
    , bb()
    , center()
    , size(0.0)
    , rotation(0.0)
    , keypoints()
    , confidence(0.0)
    , name()  {
      bb.assign(0.0);
  }
  Face_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , capture_time()
    , timetrack()
    , bb()
    , center(_alloc)
    , size(0.0)
    , rotation(0.0)
    , keypoints()
    , confidence(0.0)
    , name(_alloc)  {
  (void)_alloc;
      bb.assign(0.0);

      keypoints.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef ros::Time _capture_time_type;
  _capture_time_type capture_time;

   typedef ros::Duration _timetrack_type;
  _timetrack_type timetrack;

   typedef boost::array<float, 4>  _bb_type;
  _bb_type bb;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef float _size_type;
  _size_type size;

   typedef float _rotation_type;
  _rotation_type rotation;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 5>  _keypoints_type;
  _keypoints_type keypoints;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::vision_msgs::Face_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::Face_<ContainerAllocator> const> ConstPtr;

}; // struct Face_

typedef ::vision_msgs::Face_<std::allocator<void> > Face;

typedef boost::shared_ptr< ::vision_msgs::Face > FacePtr;
typedef boost::shared_ptr< ::vision_msgs::Face const> FaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::Face_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::Face_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::Face_<ContainerAllocator1> & lhs, const ::vision_msgs::Face_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.capture_time == rhs.capture_time &&
    lhs.timetrack == rhs.timetrack &&
    lhs.bb == rhs.bb &&
    lhs.center == rhs.center &&
    lhs.size == rhs.size &&
    lhs.rotation == rhs.rotation &&
    lhs.keypoints == rhs.keypoints &&
    lhs.confidence == rhs.confidence &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::Face_<ContainerAllocator1> & lhs, const ::vision_msgs::Face_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Face_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Face_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Face_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Face_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Face_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Face_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "327c1a1090cfdba09d7b997f98e7548a";
  }

  static const char* value(const ::vision_msgs::Face_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x327c1a1090cfdba0ULL;
  static const uint64_t static_value2 = 0x9d7b997f98e7548aULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/Face";
  }

  static const char* value(const ::vision_msgs::Face_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Header for timestamp info\n"
"Header header\n"
"\n"
"# Unique identifier\n"
"string id\n"
"\n"
"# Time that the image was captured\n"
"time capture_time\n"
"\n"
"# Amount of time that the face has been tracked\n"
"duration timetrack\n"
"\n"
"# Bounding box of the face in pixels [x_origin, y_origin, width, height]\n"
"float32[4] bb\n"
"\n"
"# Center of the face (x, y, _) in the range ([0.0, 1.0], [0.0, 1.0])\n"
"geometry_msgs/Point center\n"
"\n"
"# Percentage of the face compared to the image size in pixels \n"
"# (in the range [0.0, 1.0])\n"
"float32 size\n"
"\n"
"# Rotation of the face in degrees (difference in the angle of eyes compared \n"
"# to a horizontal line)\n"
"float32 rotation 							\n"
"\n"
"#  Keypoints for eyes, nose, mouth\n"
"geometry_msgs/Point[5] keypoints\n"
"\n"
"# Confidence value in the range [0.0, 1.0]\n"
"float32 confidence\n"
"\n"
"#  Currently unused, for future compatibility\n"
"string name\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::vision_msgs::Face_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::Face_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.capture_time);
      stream.next(m.timetrack);
      stream.next(m.bb);
      stream.next(m.center);
      stream.next(m.size);
      stream.next(m.rotation);
      stream.next(m.keypoints);
      stream.next(m.confidence);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Face_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::Face_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::Face_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "capture_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.capture_time);
    s << indent << "timetrack: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.timetrack);
    s << indent << "bb[]" << std::endl;
    for (size_t i = 0; i < v.bb.size(); ++i)
    {
      s << indent << "  bb[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bb[i]);
    }
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "rotation: ";
    Printer<float>::stream(s, indent + "  ", v.rotation);
    s << indent << "keypoints[]" << std::endl;
    for (size_t i = 0; i < v.keypoints.size(); ++i)
    {
      s << indent << "  keypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.keypoints[i]);
    }
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_FACE_H
