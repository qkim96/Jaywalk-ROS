// Generated by gencpp from file audio_msgs/GetFieldResponse.msg
// DO NOT EDIT!


#ifndef AUDIO_MSGS_MESSAGE_GETFIELDRESPONSE_H
#define AUDIO_MSGS_MESSAGE_GETFIELDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace audio_msgs
{
template <class ContainerAllocator>
struct GetFieldResponse_
{
  typedef GetFieldResponse_<ContainerAllocator> Type;

  GetFieldResponse_()
    : json_value()  {
    }
  GetFieldResponse_(const ContainerAllocator& _alloc)
    : json_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _json_value_type;
  _json_value_type json_value;





  typedef boost::shared_ptr< ::audio_msgs::GetFieldResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audio_msgs::GetFieldResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetFieldResponse_

typedef ::audio_msgs::GetFieldResponse_<std::allocator<void> > GetFieldResponse;

typedef boost::shared_ptr< ::audio_msgs::GetFieldResponse > GetFieldResponsePtr;
typedef boost::shared_ptr< ::audio_msgs::GetFieldResponse const> GetFieldResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::audio_msgs::GetFieldResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::audio_msgs::GetFieldResponse_<ContainerAllocator1> & lhs, const ::audio_msgs::GetFieldResponse_<ContainerAllocator2> & rhs)
{
  return lhs.json_value == rhs.json_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::audio_msgs::GetFieldResponse_<ContainerAllocator1> & lhs, const ::audio_msgs::GetFieldResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace audio_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::audio_msgs::GetFieldResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::audio_msgs::GetFieldResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::audio_msgs::GetFieldResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1831f50ffa460ebb677d4ed8c7c0db9";
  }

  static const char* value(const ::audio_msgs::GetFieldResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1831f50ffa460ebULL;
  static const uint64_t static_value2 = 0xb677d4ed8c7c0db9ULL;
};

template<class ContainerAllocator>
struct DataType< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "audio_msgs/GetFieldResponse";
  }

  static const char* value(const ::audio_msgs::GetFieldResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string json_value\n"
"\n"
;
  }

  static const char* value(const ::audio_msgs::GetFieldResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.json_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetFieldResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::audio_msgs::GetFieldResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::audio_msgs::GetFieldResponse_<ContainerAllocator>& v)
  {
    s << indent << "json_value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.json_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUDIO_MSGS_MESSAGE_GETFIELDRESPONSE_H
