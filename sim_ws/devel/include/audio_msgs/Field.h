// Generated by gencpp from file audio_msgs/Field.msg
// DO NOT EDIT!


#ifndef AUDIO_MSGS_MESSAGE_FIELD_H
#define AUDIO_MSGS_MESSAGE_FIELD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace audio_msgs
{
template <class ContainerAllocator>
struct Field_
{
  typedef Field_<ContainerAllocator> Type;

  Field_()
    : name()
    , type()
    , length(0)
    , description()
    , mode()  {
    }
  Field_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(_alloc)
    , length(0)
    , description(_alloc)
    , mode(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef uint32_t _length_type;
  _length_type length;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::audio_msgs::Field_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audio_msgs::Field_<ContainerAllocator> const> ConstPtr;

}; // struct Field_

typedef ::audio_msgs::Field_<std::allocator<void> > Field;

typedef boost::shared_ptr< ::audio_msgs::Field > FieldPtr;
typedef boost::shared_ptr< ::audio_msgs::Field const> FieldConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::audio_msgs::Field_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::audio_msgs::Field_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::audio_msgs::Field_<ContainerAllocator1> & lhs, const ::audio_msgs::Field_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.length == rhs.length &&
    lhs.description == rhs.description &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::audio_msgs::Field_<ContainerAllocator1> & lhs, const ::audio_msgs::Field_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace audio_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::audio_msgs::Field_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::audio_msgs::Field_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::audio_msgs::Field_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::audio_msgs::Field_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::audio_msgs::Field_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::audio_msgs::Field_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::audio_msgs::Field_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5f99874fbe65807b9f7f41274d5feb1";
  }

  static const char* value(const ::audio_msgs::Field_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5f99874fbe65807ULL;
  static const uint64_t static_value2 = 0xb9f7f41274d5feb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::audio_msgs::Field_<ContainerAllocator> >
{
  static const char* value()
  {
    return "audio_msgs/Field";
  }

  static const char* value(const ::audio_msgs::Field_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::audio_msgs::Field_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string type\n"
"uint32 length\n"
"string description\n"
"string mode\n"
;
  }

  static const char* value(const ::audio_msgs::Field_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::audio_msgs::Field_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.length);
      stream.next(m.description);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Field_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::audio_msgs::Field_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::audio_msgs::Field_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.length);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUDIO_MSGS_MESSAGE_FIELD_H
