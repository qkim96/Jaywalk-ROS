// Generated by gencpp from file audio_msgs/Exchange.msg
// DO NOT EDIT!


#ifndef AUDIO_MSGS_MESSAGE_EXCHANGE_H
#define AUDIO_MSGS_MESSAGE_EXCHANGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <audio_msgs/SoundHoundCommand.h>

namespace audio_msgs
{
template <class ContainerAllocator>
struct Exchange_
{
  typedef Exchange_<ContainerAllocator> Type;

  Exchange_()
    : commands()
    , error()
    , transcription()  {
    }
  Exchange_(const ContainerAllocator& _alloc)
    : commands(_alloc)
    , error(_alloc)
    , transcription(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::audio_msgs::SoundHoundCommand_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::audio_msgs::SoundHoundCommand_<ContainerAllocator> >> _commands_type;
  _commands_type commands;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _error_type;
  _error_type error;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _transcription_type;
  _transcription_type transcription;





  typedef boost::shared_ptr< ::audio_msgs::Exchange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audio_msgs::Exchange_<ContainerAllocator> const> ConstPtr;

}; // struct Exchange_

typedef ::audio_msgs::Exchange_<std::allocator<void> > Exchange;

typedef boost::shared_ptr< ::audio_msgs::Exchange > ExchangePtr;
typedef boost::shared_ptr< ::audio_msgs::Exchange const> ExchangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::audio_msgs::Exchange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::audio_msgs::Exchange_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::audio_msgs::Exchange_<ContainerAllocator1> & lhs, const ::audio_msgs::Exchange_<ContainerAllocator2> & rhs)
{
  return lhs.commands == rhs.commands &&
    lhs.error == rhs.error &&
    lhs.transcription == rhs.transcription;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::audio_msgs::Exchange_<ContainerAllocator1> & lhs, const ::audio_msgs::Exchange_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace audio_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::audio_msgs::Exchange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::audio_msgs::Exchange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::audio_msgs::Exchange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::audio_msgs::Exchange_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::audio_msgs::Exchange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::audio_msgs::Exchange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::audio_msgs::Exchange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6f8a41761adaba28718c4d86c1aaad1";
  }

  static const char* value(const ::audio_msgs::Exchange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6f8a41761adaba2ULL;
  static const uint64_t static_value2 = 0x8718c4d86c1aaad1ULL;
};

template<class ContainerAllocator>
struct DataType< ::audio_msgs::Exchange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "audio_msgs/Exchange";
  }

  static const char* value(const ::audio_msgs::Exchange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::audio_msgs::Exchange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SoundHoundCommand[] commands\n"
"string error\n"
"string transcription\n"
"\n"
"================================================================================\n"
"MSG: audio_msgs/SoundHoundCommand\n"
"string name\n"
"mayfield_msgs/KeyValue[] params\n"
"\n"
"================================================================================\n"
"MSG: mayfield_msgs/KeyValue\n"
"# Key value pair, with values represented as strings\n"
"string k\n"
"string v\n"
;
  }

  static const char* value(const ::audio_msgs::Exchange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::audio_msgs::Exchange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commands);
      stream.next(m.error);
      stream.next(m.transcription);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Exchange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::audio_msgs::Exchange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::audio_msgs::Exchange_<ContainerAllocator>& v)
  {
    s << indent << "commands[]" << std::endl;
    for (size_t i = 0; i < v.commands.size(); ++i)
    {
      s << indent << "  commands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::audio_msgs::SoundHoundCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.commands[i]);
    }
    s << indent << "error: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error);
    s << indent << "transcription: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.transcription);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUDIO_MSGS_MESSAGE_EXCHANGE_H
