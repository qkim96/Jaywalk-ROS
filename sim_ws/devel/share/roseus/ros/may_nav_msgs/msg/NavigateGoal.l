;; Auto-generated. Do not edit!


(when (boundp 'may_nav_msgs::NavigateGoal)
  (if (not (find-package "MAY_NAV_MSGS"))
    (make-package "MAY_NAV_MSGS"))
  (shadow 'NavigateGoal (find-package "MAY_NAV_MSGS")))
(unless (find-package "MAY_NAV_MSGS::NAVIGATEGOAL")
  (make-package "MAY_NAV_MSGS::NAVIGATEGOAL"))

(in-package "ROS")
;;//! \htmlinclude NavigateGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(intern "*GO_TO_WAYPOINT*" (find-package "MAY_NAV_MSGS::NAVIGATEGOAL"))
(shadow '*GO_TO_WAYPOINT* (find-package "MAY_NAV_MSGS::NAVIGATEGOAL"))
(defconstant may_nav_msgs::NavigateGoal::*GO_TO_WAYPOINT* 0)
(intern "*DRIVE_TO_POINT_IN_IMAGE*" (find-package "MAY_NAV_MSGS::NAVIGATEGOAL"))
(shadow '*DRIVE_TO_POINT_IN_IMAGE* (find-package "MAY_NAV_MSGS::NAVIGATEGOAL"))
(defconstant may_nav_msgs::NavigateGoal::*DRIVE_TO_POINT_IN_IMAGE* 1)
(intern "*FOLLOW_ME*" (find-package "MAY_NAV_MSGS::NAVIGATEGOAL"))
(shadow '*FOLLOW_ME* (find-package "MAY_NAV_MSGS::NAVIGATEGOAL"))
(defconstant may_nav_msgs::NavigateGoal::*FOLLOW_ME* 2)

(defun may_nav_msgs::NavigateGoal-to-symbol (const)
  (cond
        ((= const 0) 'may_nav_msgs::NavigateGoal::*GO_TO_WAYPOINT*)
        ((= const 1) 'may_nav_msgs::NavigateGoal::*DRIVE_TO_POINT_IN_IMAGE*)
        ((= const 2) 'may_nav_msgs::NavigateGoal::*FOLLOW_ME*)
        (t nil)))

(defclass may_nav_msgs::NavigateGoal
  :super ros::object
  :slots (_nav_type _pose ))

(defmethod may_nav_msgs::NavigateGoal
  (:init
   (&key
    ((:nav_type __nav_type) 0)
    ((:pose __pose) (instance geometry_msgs::Pose :init))
    )
   (send-super :init)
   (setq _nav_type (round __nav_type))
   (setq _pose __pose)
   self)
  (:nav_type
   (&optional __nav_type)
   (if __nav_type (setq _nav_type __nav_type)) _nav_type)
  (:pose
   (&rest __pose)
   (if (keywordp (car __pose))
       (send* _pose __pose)
     (progn
       (if __pose (setq _pose (car __pose)))
       _pose)))
  (:serialization-length
   ()
   (+
    ;; byte _nav_type
    1
    ;; geometry_msgs/Pose _pose
    (send _pose :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; byte _nav_type
       (write-byte _nav_type s)
     ;; geometry_msgs/Pose _pose
       (send _pose :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; byte _nav_type
     (setq _nav_type (sys::peek buf ptr- :char)) (incf ptr- 1)
     (if (> _nav_type 127) (setq _nav_type (- _nav_type 256)))
   ;; geometry_msgs/Pose _pose
     (send _pose :deserialize buf ptr-) (incf ptr- (send _pose :serialization-length))
   ;;
   self)
  )

(setf (get may_nav_msgs::NavigateGoal :md5sum-) "a0717defd8a80a12c8f217581c7cb9ad")
(setf (get may_nav_msgs::NavigateGoal :datatype-) "may_nav_msgs/NavigateGoal")
(setf (get may_nav_msgs::NavigateGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
byte GO_TO_WAYPOINT=0
byte DRIVE_TO_POINT_IN_IMAGE=1
byte FOLLOW_ME=2

byte nav_type
geometry_msgs/Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :may_nav_msgs/NavigateGoal "a0717defd8a80a12c8f217581c7cb9ad")


