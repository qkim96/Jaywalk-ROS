# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/FrameResults.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg
import vision_msgs.msg

class FrameResults(genpy.Message):
  _md5sum = "6ddc9f5aeba4eed50c0dbd8bc8468f0f"
  _type = "vision_msgs/FrameResults"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
FaceArray faces
ImageClustering clustering
DetectedObjects objects
ObjectFeatures features
ImageQuality quality
# Processed modules
string[] modules
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: vision_msgs/FaceArray
Face[] faces

================================================================================
MSG: vision_msgs/Face
# Header for timestamp info
Header header

# Unique identifier
string id

# Time that the image was captured
time capture_time

# Amount of time that the face has been tracked
duration timetrack

# Bounding box of the face in pixels [x_origin, y_origin, width, height]
float32[4] bb

# Center of the face (x, y, _) in the range ([0.0, 1.0], [0.0, 1.0])
geometry_msgs/Point center

# Percentage of the face compared to the image size in pixels 
# (in the range [0.0, 1.0])
float32 size

# Rotation of the face in degrees (difference in the angle of eyes compared 
# to a horizontal line)
float32 rotation 							

#  Keypoints for eyes, nose, mouth
geometry_msgs/Point[5] keypoints

# Confidence value in the range [0.0, 1.0]
float32 confidence

#  Currently unused, for future compatibility
string name

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: vision_msgs/ImageClustering
# Header for timestamp / frame info
Header header

string cluster
uint16 current_cluster_size

================================================================================
MSG: vision_msgs/DetectedObjects
# Header for timestamp / frame info
Header header

ClassifiedObjects positive_detections
ClassifiedObjects all_detections

================================================================================
MSG: vision_msgs/ClassifiedObjects
ClassifiedObject[] objects

================================================================================
MSG: vision_msgs/ClassifiedObject
# Header for timestamp info
Header header
string object_class	  	# Detected objects
float32 confidence 		# Confidence for each detected object
sensor_msgs/RegionOfInterest roi 	# Region within frame the object was detected

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

================================================================================
MSG: vision_msgs/ObjectFeatures
Header header

uint8[] features

================================================================================
MSG: vision_msgs/ImageQuality
# Header for timestamp info
Header header
float32 brightness
float32 sharpness
float32 brightness_delta
float32 sharpness_delta
"""
  __slots__ = ['header','faces','clustering','objects','features','quality','modules']
  _slot_types = ['std_msgs/Header','vision_msgs/FaceArray','vision_msgs/ImageClustering','vision_msgs/DetectedObjects','vision_msgs/ObjectFeatures','vision_msgs/ImageQuality','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,faces,clustering,objects,features,quality,modules

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FrameResults, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.faces is None:
        self.faces = vision_msgs.msg.FaceArray()
      if self.clustering is None:
        self.clustering = vision_msgs.msg.ImageClustering()
      if self.objects is None:
        self.objects = vision_msgs.msg.DetectedObjects()
      if self.features is None:
        self.features = vision_msgs.msg.ObjectFeatures()
      if self.quality is None:
        self.quality = vision_msgs.msg.ImageQuality()
      if self.modules is None:
        self.modules = []
    else:
      self.header = std_msgs.msg.Header()
      self.faces = vision_msgs.msg.FaceArray()
      self.clustering = vision_msgs.msg.ImageClustering()
      self.objects = vision_msgs.msg.DetectedObjects()
      self.features = vision_msgs.msg.ObjectFeatures()
      self.quality = vision_msgs.msg.ImageQuality()
      self.modules = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.faces.faces)
      buff.write(_struct_I.pack(length))
      for val1 in self.faces.faces:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.capture_time
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v4 = val1.timetrack
        _x = _v4
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_4f().pack(*val1.bb))
        _v5 = val1.center
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.size, _x.rotation))
        if len(val1.keypoints) != 5:
          self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (5, len(val1.keypoints), 'val1.keypoints')))
        for val2 in val1.keypoints:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.clustering.header.seq, _x.clustering.header.stamp.secs, _x.clustering.header.stamp.nsecs))
      _x = self.clustering.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.clustering.cluster
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H3I().pack(_x.clustering.current_cluster_size, _x.objects.header.seq, _x.objects.header.stamp.secs, _x.objects.header.stamp.nsecs))
      _x = self.objects.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects.positive_detections.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects.positive_detections.objects:
        _v6 = val1.header
        _x = _v6.seq
        buff.write(_get_struct_I().pack(_x))
        _v7 = _v6.stamp
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v6.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.object_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
        _v8 = val1.roi
        _x = _v8
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
      length = len(self.objects.all_detections.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects.all_detections.objects:
        _v9 = val1.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.object_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
        _v11 = val1.roi
        _x = _v11
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
      _x = self
      buff.write(_get_struct_3I().pack(_x.features.header.seq, _x.features.header.stamp.secs, _x.features.header.stamp.nsecs))
      _x = self.features.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.features.features
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs))
      _x = self.quality.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.quality.brightness, _x.quality.sharpness, _x.quality.brightness_delta, _x.quality.sharpness_delta))
      length = len(self.modules)
      buff.write(_struct_I.pack(length))
      for val1 in self.modules:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.faces is None:
        self.faces = vision_msgs.msg.FaceArray()
      if self.clustering is None:
        self.clustering = vision_msgs.msg.ImageClustering()
      if self.objects is None:
        self.objects = vision_msgs.msg.DetectedObjects()
      if self.features is None:
        self.features = vision_msgs.msg.ObjectFeatures()
      if self.quality is None:
        self.quality = vision_msgs.msg.ImageQuality()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faces.faces = []
      for i in range(0, length):
        val1 = vision_msgs.msg.Face()
        _v12 = val1.header
        start = end
        end += 4
        (_v12.seq,) = _get_struct_I().unpack(str[start:end])
        _v13 = _v12.stamp
        _x = _v13
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v12.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v14 = val1.capture_time
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v15 = val1.timetrack
        _x = _v15
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 16
        val1.bb = _get_struct_4f().unpack(str[start:end])
        _v16 = val1.center
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.size, _x.rotation,) = _get_struct_2f().unpack(str[start:end])
        val1.keypoints = []
        for i in range(0, 5):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.keypoints.append(val2)
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        self.faces.faces.append(val1)
      _x = self
      start = end
      end += 12
      (_x.clustering.header.seq, _x.clustering.header.stamp.secs, _x.clustering.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clustering.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.clustering.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clustering.cluster = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.clustering.cluster = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.clustering.current_cluster_size, _x.objects.header.seq, _x.objects.header.stamp.secs, _x.objects.header.stamp.nsecs,) = _get_struct_H3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.objects.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.objects.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects.positive_detections.objects = []
      for i in range(0, length):
        val1 = vision_msgs.msg.ClassifiedObject()
        _v17 = val1.header
        start = end
        end += 4
        (_v17.seq,) = _get_struct_I().unpack(str[start:end])
        _v18 = _v17.stamp
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v17.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v17.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.object_class = str[start:end]
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        _v19 = val1.roi
        _x = _v19
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v19.do_rectify = bool(_v19.do_rectify)
        self.objects.positive_detections.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects.all_detections.objects = []
      for i in range(0, length):
        val1 = vision_msgs.msg.ClassifiedObject()
        _v20 = val1.header
        start = end
        end += 4
        (_v20.seq,) = _get_struct_I().unpack(str[start:end])
        _v21 = _v20.stamp
        _x = _v21
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v20.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v20.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.object_class = str[start:end]
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        _v22 = val1.roi
        _x = _v22
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v22.do_rectify = bool(_v22.do_rectify)
        self.objects.all_detections.objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.features.header.seq, _x.features.header.stamp.secs, _x.features.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.features.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.features.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.features.features = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quality.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.quality.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.quality.brightness, _x.quality.sharpness, _x.quality.brightness_delta, _x.quality.sharpness_delta,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.modules = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.modules.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.faces.faces)
      buff.write(_struct_I.pack(length))
      for val1 in self.faces.faces:
        _v23 = val1.header
        _x = _v23.seq
        buff.write(_get_struct_I().pack(_x))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v25 = val1.capture_time
        _x = _v25
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v26 = val1.timetrack
        _x = _v26
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(val1.bb.tostring())
        _v27 = val1.center
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.size, _x.rotation))
        if len(val1.keypoints) != 5:
          self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (5, len(val1.keypoints), 'val1.keypoints')))
        for val2 in val1.keypoints:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.clustering.header.seq, _x.clustering.header.stamp.secs, _x.clustering.header.stamp.nsecs))
      _x = self.clustering.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.clustering.cluster
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H3I().pack(_x.clustering.current_cluster_size, _x.objects.header.seq, _x.objects.header.stamp.secs, _x.objects.header.stamp.nsecs))
      _x = self.objects.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects.positive_detections.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects.positive_detections.objects:
        _v28 = val1.header
        _x = _v28.seq
        buff.write(_get_struct_I().pack(_x))
        _v29 = _v28.stamp
        _x = _v29
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v28.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.object_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
        _v30 = val1.roi
        _x = _v30
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
      length = len(self.objects.all_detections.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects.all_detections.objects:
        _v31 = val1.header
        _x = _v31.seq
        buff.write(_get_struct_I().pack(_x))
        _v32 = _v31.stamp
        _x = _v32
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v31.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.object_class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
        _v33 = val1.roi
        _x = _v33
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
      _x = self
      buff.write(_get_struct_3I().pack(_x.features.header.seq, _x.features.header.stamp.secs, _x.features.header.stamp.nsecs))
      _x = self.features.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.features.features
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs))
      _x = self.quality.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.quality.brightness, _x.quality.sharpness, _x.quality.brightness_delta, _x.quality.sharpness_delta))
      length = len(self.modules)
      buff.write(_struct_I.pack(length))
      for val1 in self.modules:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.faces is None:
        self.faces = vision_msgs.msg.FaceArray()
      if self.clustering is None:
        self.clustering = vision_msgs.msg.ImageClustering()
      if self.objects is None:
        self.objects = vision_msgs.msg.DetectedObjects()
      if self.features is None:
        self.features = vision_msgs.msg.ObjectFeatures()
      if self.quality is None:
        self.quality = vision_msgs.msg.ImageQuality()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faces.faces = []
      for i in range(0, length):
        val1 = vision_msgs.msg.Face()
        _v34 = val1.header
        start = end
        end += 4
        (_v34.seq,) = _get_struct_I().unpack(str[start:end])
        _v35 = _v34.stamp
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v34.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v36 = val1.capture_time
        _x = _v36
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v37 = val1.timetrack
        _x = _v37
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 16
        val1.bb = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
        _v38 = val1.center
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.size, _x.rotation,) = _get_struct_2f().unpack(str[start:end])
        val1.keypoints = []
        for i in range(0, 5):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.keypoints.append(val2)
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        self.faces.faces.append(val1)
      _x = self
      start = end
      end += 12
      (_x.clustering.header.seq, _x.clustering.header.stamp.secs, _x.clustering.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clustering.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.clustering.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clustering.cluster = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.clustering.cluster = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.clustering.current_cluster_size, _x.objects.header.seq, _x.objects.header.stamp.secs, _x.objects.header.stamp.nsecs,) = _get_struct_H3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.objects.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.objects.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects.positive_detections.objects = []
      for i in range(0, length):
        val1 = vision_msgs.msg.ClassifiedObject()
        _v39 = val1.header
        start = end
        end += 4
        (_v39.seq,) = _get_struct_I().unpack(str[start:end])
        _v40 = _v39.stamp
        _x = _v40
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v39.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v39.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.object_class = str[start:end]
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        _v41 = val1.roi
        _x = _v41
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v41.do_rectify = bool(_v41.do_rectify)
        self.objects.positive_detections.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects.all_detections.objects = []
      for i in range(0, length):
        val1 = vision_msgs.msg.ClassifiedObject()
        _v42 = val1.header
        start = end
        end += 4
        (_v42.seq,) = _get_struct_I().unpack(str[start:end])
        _v43 = _v42.stamp
        _x = _v43
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v42.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v42.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object_class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.object_class = str[start:end]
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        _v44 = val1.roi
        _x = _v44
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v44.do_rectify = bool(_v44.do_rectify)
        self.objects.all_detections.objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.features.header.seq, _x.features.header.stamp.secs, _x.features.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.features.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.features.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.features.features = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quality.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.quality.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.quality.brightness, _x.quality.sharpness, _x.quality.brightness_delta, _x.quality.sharpness_delta,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.modules = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.modules.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4IB = None
def _get_struct_4IB():
    global _struct_4IB
    if _struct_4IB is None:
        _struct_4IB = struct.Struct("<4IB")
    return _struct_4IB
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_H3I = None
def _get_struct_H3I():
    global _struct_H3I
    if _struct_H3I is None:
        _struct_H3I = struct.Struct("<H3I")
    return _struct_H3I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
