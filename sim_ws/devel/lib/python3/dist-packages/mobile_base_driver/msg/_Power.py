# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobile_base_driver/Power.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mobile_base_driver.msg

class Power(genpy.Message):
  _md5sum = "64de407003b036b2169e0188bd020101"
  _type = "mobile_base_driver/Power"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16[] adc_channels
float32 v_dock
float32 v_batt
float32 i_batt
float32 t_batt
bool dock_present
bool is_charging
bool power_button_pressed
BatteryCapacity battery

================================================================================
MSG: mobile_base_driver/BatteryCapacity
int16 mAh
int8 pct
int8 rounded_pct # capacity percentage estimate, rounded to the nearest 5 and
                 # subjected to hysteresis so it can only change if the value has
                 # changed by at least 5
"""
  __slots__ = ['adc_channels','v_dock','v_batt','i_batt','t_batt','dock_present','is_charging','power_button_pressed','battery']
  _slot_types = ['uint16[]','float32','float32','float32','float32','bool','bool','bool','mobile_base_driver/BatteryCapacity']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       adc_channels,v_dock,v_batt,i_batt,t_batt,dock_present,is_charging,power_button_pressed,battery

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Power, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.adc_channels is None:
        self.adc_channels = []
      if self.v_dock is None:
        self.v_dock = 0.
      if self.v_batt is None:
        self.v_batt = 0.
      if self.i_batt is None:
        self.i_batt = 0.
      if self.t_batt is None:
        self.t_batt = 0.
      if self.dock_present is None:
        self.dock_present = False
      if self.is_charging is None:
        self.is_charging = False
      if self.power_button_pressed is None:
        self.power_button_pressed = False
      if self.battery is None:
        self.battery = mobile_base_driver.msg.BatteryCapacity()
    else:
      self.adc_channels = []
      self.v_dock = 0.
      self.v_batt = 0.
      self.i_batt = 0.
      self.t_batt = 0.
      self.dock_present = False
      self.is_charging = False
      self.power_button_pressed = False
      self.battery = mobile_base_driver.msg.BatteryCapacity()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.adc_channels)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.adc_channels))
      _x = self
      buff.write(_get_struct_4f3Bh2b().pack(_x.v_dock, _x.v_batt, _x.i_batt, _x.t_batt, _x.dock_present, _x.is_charging, _x.power_button_pressed, _x.battery.mAh, _x.battery.pct, _x.battery.rounded_pct))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.battery is None:
        self.battery = mobile_base_driver.msg.BatteryCapacity()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.adc_channels = s.unpack(str[start:end])
      _x = self
      start = end
      end += 23
      (_x.v_dock, _x.v_batt, _x.i_batt, _x.t_batt, _x.dock_present, _x.is_charging, _x.power_button_pressed, _x.battery.mAh, _x.battery.pct, _x.battery.rounded_pct,) = _get_struct_4f3Bh2b().unpack(str[start:end])
      self.dock_present = bool(self.dock_present)
      self.is_charging = bool(self.is_charging)
      self.power_button_pressed = bool(self.power_button_pressed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.adc_channels)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.adc_channels.tostring())
      _x = self
      buff.write(_get_struct_4f3Bh2b().pack(_x.v_dock, _x.v_batt, _x.i_batt, _x.t_batt, _x.dock_present, _x.is_charging, _x.power_button_pressed, _x.battery.mAh, _x.battery.pct, _x.battery.rounded_pct))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.battery is None:
        self.battery = mobile_base_driver.msg.BatteryCapacity()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.adc_channels = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      _x = self
      start = end
      end += 23
      (_x.v_dock, _x.v_batt, _x.i_batt, _x.t_batt, _x.dock_present, _x.is_charging, _x.power_button_pressed, _x.battery.mAh, _x.battery.pct, _x.battery.rounded_pct,) = _get_struct_4f3Bh2b().unpack(str[start:end])
      self.dock_present = bool(self.dock_present)
      self.is_charging = bool(self.is_charging)
      self.power_button_pressed = bool(self.power_button_pressed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f3Bh2b = None
def _get_struct_4f3Bh2b():
    global _struct_4f3Bh2b
    if _struct_4f3Bh2b is None:
        _struct_4f3Bh2b = struct.Struct("<4f3Bh2b")
    return _struct_4f3Bh2b
