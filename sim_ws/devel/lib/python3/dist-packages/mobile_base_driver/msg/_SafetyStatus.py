# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobile_base_driver/SafetyStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SafetyStatus(genpy.Message):
  _md5sum = "d125b2e4a510271c37ef066dc9d6c0de"
  _type = "mobile_base_driver/SafetyStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# bit positions, same as in iris_comm
int8 HB_bp   = 0  			# Heartbeat
int8 CFHW_bp = 1			# Cliff to Motor Control HW
int8 CF0_bp  = 2			# Cliff 0
int8 CF1_bp  = 3			# Cliff 1
int8 CF2_bp  = 4			# Cliff 2
int8 CF3_bp  = 5			# Cliff 3
int8 CF4_bp  = 6			# Cliff 4
int8 CF5_bp  = 7			# Cliff 5
int8 DP_bp  = 8			# Drop Right and Left
int8 BPR_bp  = 10			# Bump Right
int8 BPM_bp  = 11			# Bump Middle
int8 BPL_bp  = 12			# Bump Left
int8 CLL_bp  = 13			# Clothesline

uint32 status
"""
  # Pseudo-constants
  HB_bp = 0
  CFHW_bp = 1
  CF0_bp = 2
  CF1_bp = 3
  CF2_bp = 4
  CF3_bp = 5
  CF4_bp = 6
  CF5_bp = 7
  DP_bp = 8
  BPR_bp = 10
  BPM_bp = 11
  BPL_bp = 12
  CLL_bp = 13

  __slots__ = ['status']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
    else:
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
