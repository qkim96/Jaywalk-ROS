# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobile_base_driver/CliffSensor.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CliffSensor(genpy.Message):
  _md5sum = "df8e935c1e6098b4bc39e9a6c6ab00d2"
  _type = "mobile_base_driver/CliffSensor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Provides a cliff sensor reading
# This message is generated whenever a particular cliff sensor signals that the
# robot approaches or moves away from a cliff.

# cliff sensor
uint8 RIGHT     = 0
uint8 MIDRIGHT  = 1
uint8 MIDLEFT   = 2
uint8 LEFT      = 3
uint8 BACKLEFT  = 4
uint8 BACKRIGHT = 5

# cliff sensor state
uint8 FLOOR = 0
uint8 CLIFF = 1

uint8 sensor
uint8 state

# distance to floor when cliff was detected
float32 distance

# return rate from the vl6180x, rear cliff sensors only
float32 return_rate"""
  # Pseudo-constants
  RIGHT = 0
  MIDRIGHT = 1
  MIDLEFT = 2
  LEFT = 3
  BACKLEFT = 4
  BACKRIGHT = 5
  FLOOR = 0
  CLIFF = 1

  __slots__ = ['sensor','state','distance','return_rate']
  _slot_types = ['uint8','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensor,state,distance,return_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CliffSensor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensor is None:
        self.sensor = 0
      if self.state is None:
        self.state = 0
      if self.distance is None:
        self.distance = 0.
      if self.return_rate is None:
        self.return_rate = 0.
    else:
      self.sensor = 0
      self.state = 0
      self.distance = 0.
      self.return_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B2f().pack(_x.sensor, _x.state, _x.distance, _x.return_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.sensor, _x.state, _x.distance, _x.return_rate,) = _get_struct_2B2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B2f().pack(_x.sensor, _x.state, _x.distance, _x.return_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.sensor, _x.state, _x.distance, _x.return_rate,) = _get_struct_2B2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2f = None
def _get_struct_2B2f():
    global _struct_2B2f
    if _struct_2B2f is None:
        _struct_2B2f = struct.Struct("<2B2f")
    return _struct_2B2f
