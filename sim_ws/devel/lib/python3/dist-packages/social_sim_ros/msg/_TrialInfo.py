# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from social_sim_ros/TrialInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import std_msgs.msg

class TrialInfo(genpy.Message):
  _md5sum = "e8f0eee793947e51716938ffff8f8195"
  _type = "social_sim_ros/TrialInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Message containing the information of running a single A-B navigation trial

Header                    header

# Information about the current interaction
time                      trial_start                                    # When did we start tracking metrics for this trial
float64                   timeout_time                                   # How long is allowed for the episode have to complete?
string                    trial_name                                     # Which trial name are we running
uint16                    trial_number                                   # Which trial number are we running
uint32                    num_actors                                     # How many people in the scene?

# Robot start / goal locations
geometry_msgs/Pose        robot_start
geometry_msgs/Pose        robot_goal

# Robot location / distance relative to start / goal
float64                   dist_to_target                                 # Current distance to target
float64                   min_dist_to_target                             # Closest difference to the target the robot has come
geometry_msgs/Pose[]      robot_poses                                    # Poses of the robot over the episode
time[]                    robot_poses_ts                                 # Timestamps of the robot poses over the episode

# Robot location relative to pedestrians
float64                   min_dist_to_ped                                # Minimum distance to any pedestrian throughout the trial

# Collisions between robots and people
uint32                    robot_on_person_intimate_dist_violations       # Robot passes w/in the intimate distance of a pedestrian
uint32                    person_on_robot_intimate_dist_violations       # A person passes w/in the intimate distance of the robot
uint32                    robot_on_person_personal_dist_violations       # Robot passes w/in the personal distance of a pedestrian
uint32                    person_on_robot_personal_dist_violations       # A person passes w/in the personal distance of the robot
uint32                    robot_on_person_collisions                     # Number of times that the robot collided with a person
uint32                    person_on_robot_collisions                     # Number of times that ap person collided with the robot

# Collisions w/ static objects
uint32                    obj_collisions                                 # Number of times that the robot collided with a static object

# Computed post-hoc
#bool                     completed                                      # was the robots finals distance to the goal within the desired distance?
#float64                  targ_dist_norm                                 # dist_to_target normalized by path length
#float64                  path_length                                    # Approximate distance traveled by robot
#float64                  mean_dist_to_target_not_moving                 # How far away from the target was the robot while not moving
#float64                  time_not_moving                                # Seconds the robot was not moving. Computed by checking if the robot moved more than 0.05m since a check the last 1s ago. If not, accumulate the time since the last check.
#bool                     episode_timed_out
#float64                  path_irregularity
#float64                  path_efficiency

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','trial_start','timeout_time','trial_name','trial_number','num_actors','robot_start','robot_goal','dist_to_target','min_dist_to_target','robot_poses','robot_poses_ts','min_dist_to_ped','robot_on_person_intimate_dist_violations','person_on_robot_intimate_dist_violations','robot_on_person_personal_dist_violations','person_on_robot_personal_dist_violations','robot_on_person_collisions','person_on_robot_collisions','obj_collisions']
  _slot_types = ['std_msgs/Header','time','float64','string','uint16','uint32','geometry_msgs/Pose','geometry_msgs/Pose','float64','float64','geometry_msgs/Pose[]','time[]','float64','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,trial_start,timeout_time,trial_name,trial_number,num_actors,robot_start,robot_goal,dist_to_target,min_dist_to_target,robot_poses,robot_poses_ts,min_dist_to_ped,robot_on_person_intimate_dist_violations,person_on_robot_intimate_dist_violations,robot_on_person_personal_dist_violations,person_on_robot_personal_dist_violations,robot_on_person_collisions,person_on_robot_collisions,obj_collisions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrialInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trial_start is None:
        self.trial_start = genpy.Time()
      if self.timeout_time is None:
        self.timeout_time = 0.
      if self.trial_name is None:
        self.trial_name = ''
      if self.trial_number is None:
        self.trial_number = 0
      if self.num_actors is None:
        self.num_actors = 0
      if self.robot_start is None:
        self.robot_start = geometry_msgs.msg.Pose()
      if self.robot_goal is None:
        self.robot_goal = geometry_msgs.msg.Pose()
      if self.dist_to_target is None:
        self.dist_to_target = 0.
      if self.min_dist_to_target is None:
        self.min_dist_to_target = 0.
      if self.robot_poses is None:
        self.robot_poses = []
      if self.robot_poses_ts is None:
        self.robot_poses_ts = []
      if self.min_dist_to_ped is None:
        self.min_dist_to_ped = 0.
      if self.robot_on_person_intimate_dist_violations is None:
        self.robot_on_person_intimate_dist_violations = 0
      if self.person_on_robot_intimate_dist_violations is None:
        self.person_on_robot_intimate_dist_violations = 0
      if self.robot_on_person_personal_dist_violations is None:
        self.robot_on_person_personal_dist_violations = 0
      if self.person_on_robot_personal_dist_violations is None:
        self.person_on_robot_personal_dist_violations = 0
      if self.robot_on_person_collisions is None:
        self.robot_on_person_collisions = 0
      if self.person_on_robot_collisions is None:
        self.person_on_robot_collisions = 0
      if self.obj_collisions is None:
        self.obj_collisions = 0
    else:
      self.header = std_msgs.msg.Header()
      self.trial_start = genpy.Time()
      self.timeout_time = 0.
      self.trial_name = ''
      self.trial_number = 0
      self.num_actors = 0
      self.robot_start = geometry_msgs.msg.Pose()
      self.robot_goal = geometry_msgs.msg.Pose()
      self.dist_to_target = 0.
      self.min_dist_to_target = 0.
      self.robot_poses = []
      self.robot_poses_ts = []
      self.min_dist_to_ped = 0.
      self.robot_on_person_intimate_dist_violations = 0
      self.person_on_robot_intimate_dist_violations = 0
      self.robot_on_person_personal_dist_violations = 0
      self.person_on_robot_personal_dist_violations = 0
      self.robot_on_person_collisions = 0
      self.person_on_robot_collisions = 0
      self.obj_collisions = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Id().pack(_x.trial_start.secs, _x.trial_start.nsecs, _x.timeout_time))
      _x = self.trial_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HI16d().pack(_x.trial_number, _x.num_actors, _x.robot_start.position.x, _x.robot_start.position.y, _x.robot_start.position.z, _x.robot_start.orientation.x, _x.robot_start.orientation.y, _x.robot_start.orientation.z, _x.robot_start.orientation.w, _x.robot_goal.position.x, _x.robot_goal.position.y, _x.robot_goal.position.z, _x.robot_goal.orientation.x, _x.robot_goal.orientation.y, _x.robot_goal.orientation.z, _x.robot_goal.orientation.w, _x.dist_to_target, _x.min_dist_to_target))
      length = len(self.robot_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.robot_poses_ts)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_poses_ts:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_d7I().pack(_x.min_dist_to_ped, _x.robot_on_person_intimate_dist_violations, _x.person_on_robot_intimate_dist_violations, _x.robot_on_person_personal_dist_violations, _x.person_on_robot_personal_dist_violations, _x.robot_on_person_collisions, _x.person_on_robot_collisions, _x.obj_collisions))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trial_start is None:
        self.trial_start = genpy.Time()
      if self.robot_start is None:
        self.robot_start = geometry_msgs.msg.Pose()
      if self.robot_goal is None:
        self.robot_goal = geometry_msgs.msg.Pose()
      if self.robot_poses is None:
        self.robot_poses = None
      if self.robot_poses_ts is None:
        self.robot_poses_ts = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.trial_start.secs, _x.trial_start.nsecs, _x.timeout_time,) = _get_struct_2Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trial_name = str[start:end]
      _x = self
      start = end
      end += 134
      (_x.trial_number, _x.num_actors, _x.robot_start.position.x, _x.robot_start.position.y, _x.robot_start.position.z, _x.robot_start.orientation.x, _x.robot_start.orientation.y, _x.robot_start.orientation.z, _x.robot_start.orientation.w, _x.robot_goal.position.x, _x.robot_goal.position.y, _x.robot_goal.position.z, _x.robot_goal.orientation.x, _x.robot_goal.orientation.y, _x.robot_goal.orientation.z, _x.robot_goal.orientation.w, _x.dist_to_target, _x.min_dist_to_target,) = _get_struct_HI16d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.robot_poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_poses_ts = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.robot_poses_ts.append(val1)
      _x = self
      start = end
      end += 36
      (_x.min_dist_to_ped, _x.robot_on_person_intimate_dist_violations, _x.person_on_robot_intimate_dist_violations, _x.robot_on_person_personal_dist_violations, _x.person_on_robot_personal_dist_violations, _x.robot_on_person_collisions, _x.person_on_robot_collisions, _x.obj_collisions,) = _get_struct_d7I().unpack(str[start:end])
      self.trial_start.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Id().pack(_x.trial_start.secs, _x.trial_start.nsecs, _x.timeout_time))
      _x = self.trial_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HI16d().pack(_x.trial_number, _x.num_actors, _x.robot_start.position.x, _x.robot_start.position.y, _x.robot_start.position.z, _x.robot_start.orientation.x, _x.robot_start.orientation.y, _x.robot_start.orientation.z, _x.robot_start.orientation.w, _x.robot_goal.position.x, _x.robot_goal.position.y, _x.robot_goal.position.z, _x.robot_goal.orientation.x, _x.robot_goal.orientation.y, _x.robot_goal.orientation.z, _x.robot_goal.orientation.w, _x.dist_to_target, _x.min_dist_to_target))
      length = len(self.robot_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.robot_poses_ts)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_poses_ts:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_d7I().pack(_x.min_dist_to_ped, _x.robot_on_person_intimate_dist_violations, _x.person_on_robot_intimate_dist_violations, _x.robot_on_person_personal_dist_violations, _x.person_on_robot_personal_dist_violations, _x.robot_on_person_collisions, _x.person_on_robot_collisions, _x.obj_collisions))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trial_start is None:
        self.trial_start = genpy.Time()
      if self.robot_start is None:
        self.robot_start = geometry_msgs.msg.Pose()
      if self.robot_goal is None:
        self.robot_goal = geometry_msgs.msg.Pose()
      if self.robot_poses is None:
        self.robot_poses = None
      if self.robot_poses_ts is None:
        self.robot_poses_ts = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.trial_start.secs, _x.trial_start.nsecs, _x.timeout_time,) = _get_struct_2Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trial_name = str[start:end]
      _x = self
      start = end
      end += 134
      (_x.trial_number, _x.num_actors, _x.robot_start.position.x, _x.robot_start.position.y, _x.robot_start.position.z, _x.robot_start.orientation.x, _x.robot_start.orientation.y, _x.robot_start.orientation.z, _x.robot_start.orientation.w, _x.robot_goal.position.x, _x.robot_goal.position.y, _x.robot_goal.position.z, _x.robot_goal.orientation.x, _x.robot_goal.orientation.y, _x.robot_goal.orientation.z, _x.robot_goal.orientation.w, _x.dist_to_target, _x.min_dist_to_target,) = _get_struct_HI16d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.robot_poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_poses_ts = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.robot_poses_ts.append(val1)
      _x = self
      start = end
      end += 36
      (_x.min_dist_to_ped, _x.robot_on_person_intimate_dist_violations, _x.person_on_robot_intimate_dist_violations, _x.robot_on_person_personal_dist_violations, _x.person_on_robot_personal_dist_violations, _x.robot_on_person_collisions, _x.person_on_robot_collisions, _x.obj_collisions,) = _get_struct_d7I().unpack(str[start:end])
      self.trial_start.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2Id = None
def _get_struct_2Id():
    global _struct_2Id
    if _struct_2Id is None:
        _struct_2Id = struct.Struct("<2Id")
    return _struct_2Id
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_HI16d = None
def _get_struct_HI16d():
    global _struct_HI16d
    if _struct_HI16d is None:
        _struct_HI16d = struct.Struct("<HI16d")
    return _struct_HI16d
_struct_d7I = None
def _get_struct_d7I():
    global _struct_d7I
    if _struct_d7I is None:
        _struct_d7I = struct.Struct("<d7I")
    return _struct_d7I
