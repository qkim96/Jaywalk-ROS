# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuri_api/Volume.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Volume(genpy.Message):
  _md5sum = "c2006af99be3d44213e306b5de119dfc"
  _type = "kuri_api/Volume"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Volume level
# If is_relative is True, this adds to the current volume level
# If is_relative is False, this sets the current volume level
# Note: level is on the range [0:100], and will be clapmed appropriately
# upon receipt of this message
int16 level

# Whether the level should be added to the current level or set absolutely
bool is_relative

# Mute and unmute
# If either of these are set to true, the above values will not be used
# Muting stores the volume level and sets the level to 0
# Unmuting restores the volume level (or uses the default volume if no level
# has been stored)
bool mute
bool unmute
"""
  __slots__ = ['level','is_relative','mute','unmute']
  _slot_types = ['int16','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       level,is_relative,mute,unmute

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Volume, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.level is None:
        self.level = 0
      if self.is_relative is None:
        self.is_relative = False
      if self.mute is None:
        self.mute = False
      if self.unmute is None:
        self.unmute = False
    else:
      self.level = 0
      self.is_relative = False
      self.mute = False
      self.unmute = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h3B().pack(_x.level, _x.is_relative, _x.mute, _x.unmute))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.level, _x.is_relative, _x.mute, _x.unmute,) = _get_struct_h3B().unpack(str[start:end])
      self.is_relative = bool(self.is_relative)
      self.mute = bool(self.mute)
      self.unmute = bool(self.unmute)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h3B().pack(_x.level, _x.is_relative, _x.mute, _x.unmute))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.level, _x.is_relative, _x.mute, _x.unmute,) = _get_struct_h3B().unpack(str[start:end])
      self.is_relative = bool(self.is_relative)
      self.mute = bool(self.mute)
      self.unmute = bool(self.unmute)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h3B = None
def _get_struct_h3B():
    global _struct_h3B
    if _struct_h3B is None:
        _struct_h3B = struct.Struct("<h3B")
    return _struct_h3B
